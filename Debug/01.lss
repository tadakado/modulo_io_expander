
01.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00803e00  00000a96  00000b2a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a96  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000191  00803e16  00803e16  00000b40  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b40  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000b70  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002b8  00000000  00000000  00000bb0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000053d9  00000000  00000000  00000e68  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002209  00000000  00000000  00006241  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000016bc  00000000  00000000  0000844a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000458  00000000  00000000  00009b08  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001f50  00000000  00000000  00009f60  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c90  00000000  00000000  0000beb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001e8  00000000  00000000  0000cb40  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
  26:	d6 c4       	rjmp	.+2476   	; 0x9d4 <__vector_19>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	cd bf       	out	0x3d, r28	; 61
  3c:	df e3       	ldi	r29, 0x3F	; 63
  3e:	de bf       	out	0x3e, r29	; 62

00000040 <__do_copy_data>:
  40:	1e e3       	ldi	r17, 0x3E	; 62
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	be e3       	ldi	r27, 0x3E	; 62
  46:	e6 e9       	ldi	r30, 0x96	; 150
  48:	fa e0       	ldi	r31, 0x0A	; 10
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	a6 31       	cpi	r26, 0x16	; 22
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	2f e3       	ldi	r18, 0x3F	; 63
  58:	a6 e1       	ldi	r26, 0x16	; 22
  5a:	be e3       	ldi	r27, 0x3E	; 62
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	a7 3a       	cpi	r26, 0xA7	; 167
  62:	b2 07       	cpc	r27, r18
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	14 d3       	rcall	.+1576   	; 0x690 <main>
  68:	14 c5       	rjmp	.+2600   	; 0xa92 <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
  6c:	09 d4       	rcall	.+2066   	; 0x880 <system_init>
  6e:	08 95       	ret

00000070 <I2C_error_handler>:
uint8_t num_LEDs = 0;

void sleep()
{
	ENABLE_INTERRUPTS();
	sleep_mode();
  70:	08 95       	ret

00000072 <I2C_address_handler>:
  72:	10 d4       	rcall	.+2080   	; 0x894 <I2C_0_read>
  74:	89 7f       	andi	r24, 0xF9	; 249
  76:	80 93 97 3f 	sts	0x3F97, r24	; 0x803f97 <i2c_saddr>
  7a:	16 d4       	rcall	.+2092   	; 0x8a8 <I2C_0_send_ack>
  7c:	80 91 97 3f 	lds	r24, 0x3F97	; 0x803f97 <i2c_saddr>
  80:	80 ff       	sbrs	r24, 0
  82:	05 c0       	rjmp	.+10     	; 0x8e <__EEPROM_REGION_LENGTH__+0xe>
  84:	10 92 99 3f 	sts	0x3F99, r1	; 0x803f99 <data_count>
  88:	10 92 9a 3f 	sts	0x3F9A, r1	; 0x803f9a <data_count+0x1>
  8c:	08 95       	ret
  8e:	8f ef       	ldi	r24, 0xFF	; 255
  90:	9f ef       	ldi	r25, 0xFF	; 255
  92:	80 93 99 3f 	sts	0x3F99, r24	; 0x803f99 <data_count>
  96:	90 93 9a 3f 	sts	0x3F9A, r25	; 0x803f9a <data_count+0x1>
  9a:	08 95       	ret

0000009c <write_to_LEDs>:
}

void write_to_LEDs()
{
	// Clear the Write Collision flag, to allow writing
	SPI0.INTFLAGS = SPI0_INTFLAGS;
  9c:	80 91 23 08 	lds	r24, 0x0823	; 0x800823 <__RODATA_PM_OFFSET__+0x7f8823>
  a0:	80 93 23 08 	sts	0x0823, r24	; 0x800823 <__RODATA_PM_OFFSET__+0x7f8823>

	// Reset TCA counter register to ensure the first rising edge of PWM is predictable
	TCA0.SINGLE.CNT = 0 /* Count: 0 */;
  a4:	e0 e0       	ldi	r30, 0x00	; 0
  a6:	fa e0       	ldi	r31, 0x0A	; 10
  a8:	10 a2       	std	Z+32, r1	; 0x20
  aa:	11 a2       	std	Z+33, r1	; 0x21

	// Start TCA
	TCA0.SINGLE.CTRLA = TCA_SPLIT_CLKSEL_DIV1_gc /* System Clock */
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	80 83       	st	Z, r24
						| 1 << TCA_SPLIT_ENABLE_bp /* Module Enable: enabled */;

	for (uint8_t i=0; i < num_LEDs * 3; i++) {
  b0:	40 e0       	ldi	r20, 0x00	; 0
  b2:	0b c0       	rjmp	.+22     	; 0xca <write_to_LEDs+0x2e>
		// Start SPI by writing a byte to SPI data register
		SPI0.DATA = LED_data[i];
  b4:	f9 01       	movw	r30, r18
  b6:	e9 5e       	subi	r30, 0xE9	; 233
  b8:	f1 4c       	sbci	r31, 0xC1	; 193
  ba:	80 81       	ld	r24, Z
  bc:	80 93 24 08 	sts	0x0824, r24	; 0x800824 <__RODATA_PM_OFFSET__+0x7f8824>

		// Wait for transfer to complete
		while ((SPI0.INTFLAGS & SPI_RXCIF_bm) == 0) {
  c0:	80 91 23 08 	lds	r24, 0x0823	; 0x800823 <__RODATA_PM_OFFSET__+0x7f8823>
  c4:	88 23       	and	r24, r24
  c6:	e4 f7       	brge	.-8      	; 0xc0 <write_to_LEDs+0x24>

	// Start TCA
	TCA0.SINGLE.CTRLA = TCA_SPLIT_CLKSEL_DIV1_gc /* System Clock */
						| 1 << TCA_SPLIT_ENABLE_bp /* Module Enable: enabled */;

	for (uint8_t i=0; i < num_LEDs * 3; i++) {
  c8:	4f 5f       	subi	r20, 0xFF	; 255
  ca:	24 2f       	mov	r18, r20
  cc:	30 e0       	ldi	r19, 0x00	; 0
  ce:	80 91 16 3e 	lds	r24, 0x3E16	; 0x803e16 <__data_end>
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	bc 01       	movw	r22, r24
  d6:	66 0f       	add	r22, r22
  d8:	77 1f       	adc	r23, r23
  da:	86 0f       	add	r24, r22
  dc:	97 1f       	adc	r25, r23
  de:	28 17       	cp	r18, r24
  e0:	39 07       	cpc	r19, r25
  e2:	44 f3       	brlt	.-48     	; 0xb4 <write_to_LEDs+0x18>
		while ((SPI0.INTFLAGS & SPI_RXCIF_bm) == 0) {
		}
	}

	// Stop TCA
	TCA0.SINGLE.CTRLA = TCA_SPLIT_CLKSEL_DIV1_gc /* System Clock */
  e4:	10 92 00 0a 	sts	0x0A00, r1	; 0x800a00 <__RODATA_PM_OFFSET__+0x7f8a00>
  e8:	08 95       	ret

000000ea <update_LEDs>:
						| 0 << TCA_SPLIT_ENABLE_bp /* Module Enable: disabled */;
}

void update_LEDs()
{
	if (num_LEDs > 0) {
  ea:	80 91 16 3e 	lds	r24, 0x3E16	; 0x803e16 <__data_end>
  ee:	88 23       	and	r24, r24
  f0:	29 f0       	breq	.+10     	; 0xfc <update_LEDs+0x12>
		DISABLE_INTERRUPTS();
  f2:	f8 94       	cli
		write_to_LEDs();
  f4:	d3 df       	rcall	.-90     	; 0x9c <write_to_LEDs>
		num_LEDs = 0;
  f6:	10 92 16 3e 	sts	0x3E16, r1	; 0x803e16 <__data_end>
		ENABLE_INTERRUPTS();
  fa:	78 94       	sei
  fc:	08 95       	ret

000000fe <I2C_stop_handler>:
	data_count++;
}

void I2C_stop_handler()
{
	if (i2c_saddr >> 1 == I2C_LED_SADDR) {
  fe:	80 91 97 3f 	lds	r24, 0x3F97	; 0x803f97 <i2c_saddr>
 102:	86 95       	lsr	r24
 104:	80 33       	cpi	r24, 0x30	; 48
 106:	29 f4       	brne	.+10     	; 0x112 <I2C_stop_handler+0x14>
		if (reg == Update_LEDs_REG) {
 108:	80 91 98 3f 	lds	r24, 0x3F98	; 0x803f98 <reg>
 10c:	8f 3f       	cpi	r24, 0xFF	; 255
 10e:	09 f4       	brne	.+2      	; 0x112 <I2C_stop_handler+0x14>
			update_LEDs();
 110:	ec df       	rcall	.-40     	; 0xea <update_LEDs>
	if (i2c_saddr >> 1 == I2C_IOE_SADDR) {
		;
	}

	/* reset register */
	reg = 0x00;
 112:	10 92 98 3f 	sts	0x3F98, r1	; 0x803f98 <reg>

	/* Sleep mode */
	ENABLE_INTERRUPTS();
 116:	78 94       	sei
	sleep_mode();
 118:	e0 e5       	ldi	r30, 0x50	; 80
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	80 81       	ld	r24, Z
 11e:	81 60       	ori	r24, 0x01	; 1
 120:	80 83       	st	Z, r24
 122:	88 95       	sleep
 124:	80 81       	ld	r24, Z
 126:	8e 7f       	andi	r24, 0xFE	; 254
 128:	80 83       	st	Z, r24
 12a:	08 95       	ret

0000012c <read_input_port>:
		data_count = 0xffff;
	}
}

uint8_t read_input_port(uint8_t PORT_num, uint8_t portA, uint8_t portB, uint8_t portC)
{
 12c:	cf 93       	push	r28
 12e:	df 93       	push	r29
	uint8_t data = 0x00;
	uint8_t pin;
	uint8_t port;

	if (PORT_num != 0 && PORT_num != 1) return data;
 130:	82 30       	cpi	r24, 0x02	; 2
 132:	08 f0       	brcs	.+2      	; 0x136 <read_input_port+0xa>
 134:	89 c0       	rjmp	.+274    	; 0x248 <__DATA_REGION_LENGTH__+0x48>
 136:	30 e0       	ldi	r19, 0x00	; 0
 138:	50 e0       	ldi	r21, 0x00	; 0
 13a:	82 c0       	rjmp	.+260    	; 0x240 <__DATA_REGION_LENGTH__+0x40>

	for (uint8_t i=0; i<8; i++) {
		pin = PORT_pins[PORT_num][i] & 0x07;
 13c:	a8 2f       	mov	r26, r24
 13e:	b0 e0       	ldi	r27, 0x00	; 0
 140:	c3 2f       	mov	r28, r19
 142:	d0 e0       	ldi	r29, 0x00	; 0
 144:	fd 01       	movw	r30, r26
 146:	ee 0f       	add	r30, r30
 148:	ff 1f       	adc	r31, r31
 14a:	ee 0f       	add	r30, r30
 14c:	ff 1f       	adc	r31, r31
 14e:	ee 0f       	add	r30, r30
 150:	ff 1f       	adc	r31, r31
 152:	ec 5f       	subi	r30, 0xFC	; 252
 154:	f1 4c       	sbci	r31, 0xC1	; 193
 156:	ec 0f       	add	r30, r28
 158:	fd 1f       	adc	r31, r29
 15a:	90 81       	ld	r25, Z
 15c:	79 2f       	mov	r23, r25
 15e:	77 70       	andi	r23, 0x07	; 7
		port = PORT_pins[PORT_num][i] >> 4;
 160:	92 95       	swap	r25
 162:	9f 70       	andi	r25, 0x0F	; 15
		if (port == 0x0f) {
 164:	9f 30       	cpi	r25, 0x0F	; 15
 166:	69 f5       	brne	.+90     	; 0x1c2 <read_input_port+0x96>
			if (CONF_REG[PORT_num] & 1 << i) { // input pin
 168:	fd 01       	movw	r30, r26
 16a:	e0 50       	subi	r30, 0x00	; 0
 16c:	f2 4c       	sbci	r31, 0xC2	; 194
 16e:	e0 81       	ld	r30, Z
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	03 2e       	mov	r0, r19
 174:	02 c0       	rjmp	.+4      	; 0x17a <read_input_port+0x4e>
 176:	f5 95       	asr	r31
 178:	e7 95       	ror	r30
 17a:	0a 94       	dec	r0
 17c:	e2 f7       	brpl	.-8      	; 0x176 <read_input_port+0x4a>
 17e:	e0 ff       	sbrs	r30, 0
 180:	0a c0       	rjmp	.+20     	; 0x196 <read_input_port+0x6a>
				data |= 1 << i;
 182:	e1 e0       	ldi	r30, 0x01	; 1
 184:	f0 e0       	ldi	r31, 0x00	; 0
 186:	03 2e       	mov	r0, r19
 188:	02 c0       	rjmp	.+4      	; 0x18e <read_input_port+0x62>
 18a:	ee 0f       	add	r30, r30
 18c:	ff 1f       	adc	r31, r31
 18e:	0a 94       	dec	r0
 190:	e2 f7       	brpl	.-8      	; 0x18a <read_input_port+0x5e>
 192:	5e 2b       	or	r21, r30
 194:	54 c0       	rjmp	.+168    	; 0x23e <__DATA_REGION_LENGTH__+0x3e>
 			} else { // output pin
				if (OUT_REG[PORT_num] & 1 << i) {
 196:	ae 5f       	subi	r26, 0xFE	; 254
 198:	b1 4c       	sbci	r27, 0xC1	; 193
 19a:	ec 91       	ld	r30, X
 19c:	f0 e0       	ldi	r31, 0x00	; 0
 19e:	03 2e       	mov	r0, r19
 1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <read_input_port+0x7a>
 1a2:	f5 95       	asr	r31
 1a4:	e7 95       	ror	r30
 1a6:	0a 94       	dec	r0
 1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <read_input_port+0x76>
 1aa:	e0 ff       	sbrs	r30, 0
 1ac:	48 c0       	rjmp	.+144    	; 0x23e <__DATA_REGION_LENGTH__+0x3e>
					data |= 1 << i;
 1ae:	e1 e0       	ldi	r30, 0x01	; 1
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
 1b2:	03 2e       	mov	r0, r19
 1b4:	02 c0       	rjmp	.+4      	; 0x1ba <read_input_port+0x8e>
 1b6:	ee 0f       	add	r30, r30
 1b8:	ff 1f       	adc	r31, r31
 1ba:	0a 94       	dec	r0
 1bc:	e2 f7       	brpl	.-8      	; 0x1b6 <read_input_port+0x8a>
 1be:	5e 2b       	or	r21, r30
 1c0:	3e c0       	rjmp	.+124    	; 0x23e <__DATA_REGION_LENGTH__+0x3e>
				}
			}
		} else if (port == 0) {
 1c2:	91 11       	cpse	r25, r1
 1c4:	13 c0       	rjmp	.+38     	; 0x1ec <read_input_port+0xc0>
			if (portA & 1 << pin) {
 1c6:	e6 2f       	mov	r30, r22
 1c8:	f0 e0       	ldi	r31, 0x00	; 0
 1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <read_input_port+0xa4>
 1cc:	f5 95       	asr	r31
 1ce:	e7 95       	ror	r30
 1d0:	7a 95       	dec	r23
 1d2:	e2 f7       	brpl	.-8      	; 0x1cc <read_input_port+0xa0>
 1d4:	e0 ff       	sbrs	r30, 0
 1d6:	33 c0       	rjmp	.+102    	; 0x23e <__DATA_REGION_LENGTH__+0x3e>
				data |= 1 << i;
 1d8:	e1 e0       	ldi	r30, 0x01	; 1
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	03 2e       	mov	r0, r19
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <read_input_port+0xb8>
 1e0:	ee 0f       	add	r30, r30
 1e2:	ff 1f       	adc	r31, r31
 1e4:	0a 94       	dec	r0
 1e6:	e2 f7       	brpl	.-8      	; 0x1e0 <read_input_port+0xb4>
 1e8:	5e 2b       	or	r21, r30
 1ea:	29 c0       	rjmp	.+82     	; 0x23e <__DATA_REGION_LENGTH__+0x3e>
			}
		} else if (port == 1) {
 1ec:	91 30       	cpi	r25, 0x01	; 1
 1ee:	99 f4       	brne	.+38     	; 0x216 <__DATA_REGION_LENGTH__+0x16>
			if (portB & 1 << pin) {
 1f0:	e4 2f       	mov	r30, r20
 1f2:	f0 e0       	ldi	r31, 0x00	; 0
 1f4:	02 c0       	rjmp	.+4      	; 0x1fa <read_input_port+0xce>
 1f6:	f5 95       	asr	r31
 1f8:	e7 95       	ror	r30
 1fa:	7a 95       	dec	r23
 1fc:	e2 f7       	brpl	.-8      	; 0x1f6 <read_input_port+0xca>
 1fe:	e0 ff       	sbrs	r30, 0
 200:	1e c0       	rjmp	.+60     	; 0x23e <__DATA_REGION_LENGTH__+0x3e>
				data |= 1 << i;
 202:	e1 e0       	ldi	r30, 0x01	; 1
 204:	f0 e0       	ldi	r31, 0x00	; 0
 206:	03 2e       	mov	r0, r19
 208:	02 c0       	rjmp	.+4      	; 0x20e <__DATA_REGION_LENGTH__+0xe>
 20a:	ee 0f       	add	r30, r30
 20c:	ff 1f       	adc	r31, r31
 20e:	0a 94       	dec	r0
 210:	e2 f7       	brpl	.-8      	; 0x20a <__DATA_REGION_LENGTH__+0xa>
 212:	5e 2b       	or	r21, r30
 214:	14 c0       	rjmp	.+40     	; 0x23e <__DATA_REGION_LENGTH__+0x3e>
			}
		} else if (port == 2) {
 216:	92 30       	cpi	r25, 0x02	; 2
 218:	91 f4       	brne	.+36     	; 0x23e <__DATA_REGION_LENGTH__+0x3e>
			if (portC & 1 << pin) {
 21a:	e2 2f       	mov	r30, r18
 21c:	f0 e0       	ldi	r31, 0x00	; 0
 21e:	02 c0       	rjmp	.+4      	; 0x224 <__DATA_REGION_LENGTH__+0x24>
 220:	f5 95       	asr	r31
 222:	e7 95       	ror	r30
 224:	7a 95       	dec	r23
 226:	e2 f7       	brpl	.-8      	; 0x220 <__DATA_REGION_LENGTH__+0x20>
 228:	e0 ff       	sbrs	r30, 0
 22a:	09 c0       	rjmp	.+18     	; 0x23e <__DATA_REGION_LENGTH__+0x3e>
				data |= 1 << i;
 22c:	e1 e0       	ldi	r30, 0x01	; 1
 22e:	f0 e0       	ldi	r31, 0x00	; 0
 230:	03 2e       	mov	r0, r19
 232:	02 c0       	rjmp	.+4      	; 0x238 <__DATA_REGION_LENGTH__+0x38>
 234:	ee 0f       	add	r30, r30
 236:	ff 1f       	adc	r31, r31
 238:	0a 94       	dec	r0
 23a:	e2 f7       	brpl	.-8      	; 0x234 <__DATA_REGION_LENGTH__+0x34>
 23c:	5e 2b       	or	r21, r30
	uint8_t pin;
	uint8_t port;

	if (PORT_num != 0 && PORT_num != 1) return data;

	for (uint8_t i=0; i<8; i++) {
 23e:	3f 5f       	subi	r19, 0xFF	; 255
 240:	38 30       	cpi	r19, 0x08	; 8
 242:	08 f4       	brcc	.+2      	; 0x246 <__DATA_REGION_LENGTH__+0x46>
 244:	7b cf       	rjmp	.-266    	; 0x13c <read_input_port+0x10>
 246:	01 c0       	rjmp	.+2      	; 0x24a <__DATA_REGION_LENGTH__+0x4a>
{
	uint8_t data = 0x00;
	uint8_t pin;
	uint8_t port;

	if (PORT_num != 0 && PORT_num != 1) return data;
 248:	50 e0       	ldi	r21, 0x00	; 0
				data |= 1 << i;
			}
		}
	}
	return data;
}
 24a:	85 2f       	mov	r24, r21
 24c:	df 91       	pop	r29
 24e:	cf 91       	pop	r28
 250:	08 95       	ret

00000252 <I2C_read_handler>:

void I2C_read_handler()
{
	uint8_t data = 0x00;

	if (i2c_saddr >> 1 == I2C_LED_SADDR) {
 252:	90 91 97 3f 	lds	r25, 0x3F97	; 0x803f97 <i2c_saddr>
 256:	96 95       	lsr	r25
 258:	90 33       	cpi	r25, 0x30	; 48
 25a:	c9 f4       	brne	.+50     	; 0x28e <I2C_read_handler+0x3c>
		if (reg == Update_LEDs_REG) { // Maximum number of LEDs
 25c:	20 91 98 3f 	lds	r18, 0x3F98	; 0x803f98 <reg>
 260:	2f 3f       	cpi	r18, 0xFF	; 255
 262:	b9 f0       	breq	.+46     	; 0x292 <I2C_read_handler+0x40>
			data = Max_LEDs;
		} else if (reg * 3 + data_count < Max_LEDs * 3) { // LED data
 264:	30 e0       	ldi	r19, 0x00	; 0
 266:	a9 01       	movw	r20, r18
 268:	44 0f       	add	r20, r20
 26a:	55 1f       	adc	r21, r21
 26c:	24 0f       	add	r18, r20
 26e:	35 1f       	adc	r19, r21
 270:	40 91 99 3f 	lds	r20, 0x3F99	; 0x803f99 <data_count>
 274:	50 91 9a 3f 	lds	r21, 0x3F9A	; 0x803f9a <data_count+0x1>
 278:	24 0f       	add	r18, r20
 27a:	35 1f       	adc	r19, r21
 27c:	20 38       	cpi	r18, 0x80	; 128
 27e:	81 e0       	ldi	r24, 0x01	; 1
 280:	38 07       	cpc	r19, r24
 282:	48 f4       	brcc	.+18     	; 0x296 <I2C_read_handler+0x44>
			data = LED_data[reg * 3 + data_count];
 284:	f9 01       	movw	r30, r18
 286:	e9 5e       	subi	r30, 0xE9	; 233
 288:	f1 4c       	sbci	r31, 0xC1	; 193
 28a:	80 81       	ld	r24, Z
 28c:	05 c0       	rjmp	.+10     	; 0x298 <I2C_read_handler+0x46>
	return data;
}

void I2C_read_handler()
{
	uint8_t data = 0x00;
 28e:	80 e0       	ldi	r24, 0x00	; 0
 290:	03 c0       	rjmp	.+6      	; 0x298 <I2C_read_handler+0x46>

	if (i2c_saddr >> 1 == I2C_LED_SADDR) {
		if (reg == Update_LEDs_REG) { // Maximum number of LEDs
			data = Max_LEDs;
 292:	80 e8       	ldi	r24, 0x80	; 128
 294:	01 c0       	rjmp	.+2      	; 0x298 <I2C_read_handler+0x46>
	return data;
}

void I2C_read_handler()
{
	uint8_t data = 0x00;
 296:	80 e0       	ldi	r24, 0x00	; 0
		} else if (reg * 3 + data_count < Max_LEDs * 3) { // LED data
			data = LED_data[reg * 3 + data_count];
		}
	}

	if (i2c_saddr >> 1 == I2C_IOE_SADDR) {
 298:	90 32       	cpi	r25, 0x20	; 32
 29a:	09 f0       	breq	.+2      	; 0x29e <I2C_read_handler+0x4c>
 29c:	4d c0       	rjmp	.+154    	; 0x338 <I2C_read_handler+0xe6>
		if (reg == 0x00 || reg == 0x01) { // Input register
 29e:	90 91 98 3f 	lds	r25, 0x3F98	; 0x803f98 <reg>
 2a2:	92 30       	cpi	r25, 0x02	; 2
 2a4:	f0 f4       	brcc	.+60     	; 0x2e2 <I2C_read_handler+0x90>
			if (reg + data_count == 0x00) {
 2a6:	20 91 99 3f 	lds	r18, 0x3F99	; 0x803f99 <data_count>
 2aa:	30 91 9a 3f 	lds	r19, 0x3F9A	; 0x803f9a <data_count+0x1>
 2ae:	29 0f       	add	r18, r25
 2b0:	31 1d       	adc	r19, r1
 2b2:	21 15       	cp	r18, r1
 2b4:	31 05       	cpc	r19, r1
 2b6:	49 f4       	brne	.+18     	; 0x2ca <I2C_read_handler+0x78>
				data = read_input_port(0, PORTA.IN, PORTB.IN, PORTC.IN);
 2b8:	20 91 48 04 	lds	r18, 0x0448	; 0x800448 <__RODATA_PM_OFFSET__+0x7f8448>
 2bc:	40 91 28 04 	lds	r20, 0x0428	; 0x800428 <__RODATA_PM_OFFSET__+0x7f8428>
 2c0:	60 91 08 04 	lds	r22, 0x0408	; 0x800408 <__RODATA_PM_OFFSET__+0x7f8408>
 2c4:	80 e0       	ldi	r24, 0x00	; 0
 2c6:	32 df       	rcall	.-412    	; 0x12c <read_input_port>
 2c8:	37 c0       	rjmp	.+110    	; 0x338 <I2C_read_handler+0xe6>
			} else if (reg + data_count == 0x01) {
 2ca:	21 30       	cpi	r18, 0x01	; 1
 2cc:	31 05       	cpc	r19, r1
 2ce:	a1 f5       	brne	.+104    	; 0x338 <I2C_read_handler+0xe6>
				data = read_input_port(1, PORTA.IN, PORTB.IN, PORTC.IN);
 2d0:	20 91 48 04 	lds	r18, 0x0448	; 0x800448 <__RODATA_PM_OFFSET__+0x7f8448>
 2d4:	40 91 28 04 	lds	r20, 0x0428	; 0x800428 <__RODATA_PM_OFFSET__+0x7f8428>
 2d8:	60 91 08 04 	lds	r22, 0x0408	; 0x800408 <__RODATA_PM_OFFSET__+0x7f8408>
 2dc:	81 e0       	ldi	r24, 0x01	; 1
 2de:	26 df       	rcall	.-436    	; 0x12c <read_input_port>
 2e0:	2b c0       	rjmp	.+86     	; 0x338 <I2C_read_handler+0xe6>
			}
		} else if (reg == 0x02 || reg == 0x03) { // Output register
 2e2:	2e ef       	ldi	r18, 0xFE	; 254
 2e4:	29 0f       	add	r18, r25
 2e6:	22 30       	cpi	r18, 0x02	; 2
 2e8:	90 f4       	brcc	.+36     	; 0x30e <I2C_read_handler+0xbc>
			if (reg + data_count == 0x02) {
 2ea:	20 91 99 3f 	lds	r18, 0x3F99	; 0x803f99 <data_count>
 2ee:	30 91 9a 3f 	lds	r19, 0x3F9A	; 0x803f9a <data_count+0x1>
 2f2:	29 0f       	add	r18, r25
 2f4:	31 1d       	adc	r19, r1
 2f6:	22 30       	cpi	r18, 0x02	; 2
 2f8:	31 05       	cpc	r19, r1
 2fa:	19 f4       	brne	.+6      	; 0x302 <I2C_read_handler+0xb0>
				data = OUT_REG[0];
 2fc:	80 91 02 3e 	lds	r24, 0x3E02	; 0x803e02 <OUT_REG>
 300:	1b c0       	rjmp	.+54     	; 0x338 <I2C_read_handler+0xe6>
			} else if (reg + data_count == 0x03) {
 302:	23 30       	cpi	r18, 0x03	; 3
 304:	31 05       	cpc	r19, r1
 306:	c1 f4       	brne	.+48     	; 0x338 <I2C_read_handler+0xe6>
				data = OUT_REG[1];
 308:	80 91 03 3e 	lds	r24, 0x3E03	; 0x803e03 <OUT_REG+0x1>
 30c:	15 c0       	rjmp	.+42     	; 0x338 <I2C_read_handler+0xe6>
			}
		} else if (reg == 0x06 || reg == 0x07) { // Configuration register
 30e:	2a ef       	ldi	r18, 0xFA	; 250
 310:	29 0f       	add	r18, r25
 312:	22 30       	cpi	r18, 0x02	; 2
 314:	88 f4       	brcc	.+34     	; 0x338 <I2C_read_handler+0xe6>
			if (reg + data_count == 0x06) {
 316:	20 91 99 3f 	lds	r18, 0x3F99	; 0x803f99 <data_count>
 31a:	30 91 9a 3f 	lds	r19, 0x3F9A	; 0x803f9a <data_count+0x1>
 31e:	29 0f       	add	r18, r25
 320:	31 1d       	adc	r19, r1
 322:	26 30       	cpi	r18, 0x06	; 6
 324:	31 05       	cpc	r19, r1
 326:	19 f4       	brne	.+6      	; 0x32e <I2C_read_handler+0xdc>
				data = CONF_REG[0];
 328:	80 91 00 3e 	lds	r24, 0x3E00	; 0x803e00 <__DATA_REGION_ORIGIN__>
 32c:	05 c0       	rjmp	.+10     	; 0x338 <I2C_read_handler+0xe6>
			} else if (reg + data_count == 0x07) {
 32e:	27 30       	cpi	r18, 0x07	; 7
 330:	31 05       	cpc	r19, r1
 332:	11 f4       	brne	.+4      	; 0x338 <I2C_read_handler+0xe6>
				data = CONF_REG[1];
 334:	80 91 01 3e 	lds	r24, 0x3E01	; 0x803e01 <__DATA_REGION_ORIGIN__+0x1>
			}
		}
	}

	I2C_0_write(data);
 338:	b0 d2       	rcall	.+1376   	; 0x89a <I2C_0_write>
	data_count++;
 33a:	80 91 99 3f 	lds	r24, 0x3F99	; 0x803f99 <data_count>
 33e:	90 91 9a 3f 	lds	r25, 0x3F9A	; 0x803f9a <data_count+0x1>
 342:	01 96       	adiw	r24, 0x01	; 1
 344:	80 93 99 3f 	sts	0x3F99, r24	; 0x803f99 <data_count>
 348:	90 93 9a 3f 	sts	0x3F9A, r25	; 0x803f9a <data_count+0x1>
 34c:	08 95       	ret

0000034e <write_data_port>:
void write_data_port(uint8_t PORT_num, uint8_t data)
{
	uint8_t pin;
	uint8_t port;

	if (PORT_num != 0 && PORT_num != 1) return;
 34e:	82 30       	cpi	r24, 0x02	; 2
 350:	08 f0       	brcs	.+2      	; 0x354 <write_data_port+0x6>
 352:	82 c0       	rjmp	.+260    	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 354:	20 e0       	ldi	r18, 0x00	; 0
 356:	7d c0       	rjmp	.+250    	; 0x452 <__LOCK_REGION_LENGTH__+0x52>

	for (uint8_t i=0; i<8; i++) {
		pin = PORT_pins[PORT_num][i] & 0x07;
 358:	42 2f       	mov	r20, r18
 35a:	50 e0       	ldi	r21, 0x00	; 0
 35c:	e8 2f       	mov	r30, r24
 35e:	f0 e0       	ldi	r31, 0x00	; 0
 360:	ee 0f       	add	r30, r30
 362:	ff 1f       	adc	r31, r31
 364:	ee 0f       	add	r30, r30
 366:	ff 1f       	adc	r31, r31
 368:	ee 0f       	add	r30, r30
 36a:	ff 1f       	adc	r31, r31
 36c:	ec 5f       	subi	r30, 0xFC	; 252
 36e:	f1 4c       	sbci	r31, 0xC1	; 193
 370:	e4 0f       	add	r30, r20
 372:	f5 1f       	adc	r31, r21
 374:	90 81       	ld	r25, Z
 376:	39 2f       	mov	r19, r25
 378:	37 70       	andi	r19, 0x07	; 7
		port = PORT_pins[PORT_num][i] >> 4;
 37a:	92 95       	swap	r25
 37c:	9f 70       	andi	r25, 0x0F	; 15
		if (port == 0) {
 37e:	09 f5       	brne	.+66     	; 0x3c2 <write_data_port+0x74>
			if (data & 1 << i) {
 380:	46 2f       	mov	r20, r22
 382:	50 e0       	ldi	r21, 0x00	; 0
 384:	02 2e       	mov	r0, r18
 386:	02 c0       	rjmp	.+4      	; 0x38c <write_data_port+0x3e>
 388:	55 95       	asr	r21
 38a:	47 95       	ror	r20
 38c:	0a 94       	dec	r0
 38e:	e2 f7       	brpl	.-8      	; 0x388 <write_data_port+0x3a>
 390:	40 ff       	sbrs	r20, 0
 392:	0b c0       	rjmp	.+22     	; 0x3aa <write_data_port+0x5c>
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
 394:	91 b1       	in	r25, 0x01	; 1
 396:	41 e0       	ldi	r20, 0x01	; 1
 398:	50 e0       	ldi	r21, 0x00	; 0
 39a:	02 c0       	rjmp	.+4      	; 0x3a0 <write_data_port+0x52>
 39c:	44 0f       	add	r20, r20
 39e:	55 1f       	adc	r21, r21
 3a0:	3a 95       	dec	r19
 3a2:	e2 f7       	brpl	.-8      	; 0x39c <write_data_port+0x4e>
 3a4:	49 2b       	or	r20, r25
 3a6:	41 b9       	out	0x01, r20	; 1
 3a8:	53 c0       	rjmp	.+166    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
	} else {
		VPORTA.OUT &= ~(1 << pin);
 3aa:	91 b1       	in	r25, 0x01	; 1
 3ac:	41 e0       	ldi	r20, 0x01	; 1
 3ae:	50 e0       	ldi	r21, 0x00	; 0
 3b0:	02 c0       	rjmp	.+4      	; 0x3b6 <write_data_port+0x68>
 3b2:	44 0f       	add	r20, r20
 3b4:	55 1f       	adc	r21, r21
 3b6:	3a 95       	dec	r19
 3b8:	e2 f7       	brpl	.-8      	; 0x3b2 <write_data_port+0x64>
 3ba:	40 95       	com	r20
 3bc:	49 23       	and	r20, r25
 3be:	41 b9       	out	0x01, r20	; 1
 3c0:	47 c0       	rjmp	.+142    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
				PORTA_set_pin_level(pin, true);
			} else {
				PORTA_set_pin_level(pin, false);
			}
		} else if (port == 1) {
 3c2:	91 30       	cpi	r25, 0x01	; 1
 3c4:	11 f5       	brne	.+68     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
			if (data & 1 << i) {
 3c6:	e6 2f       	mov	r30, r22
 3c8:	f0 e0       	ldi	r31, 0x00	; 0
 3ca:	df 01       	movw	r26, r30
 3cc:	02 2e       	mov	r0, r18
 3ce:	02 c0       	rjmp	.+4      	; 0x3d4 <write_data_port+0x86>
 3d0:	b5 95       	asr	r27
 3d2:	a7 95       	ror	r26
 3d4:	0a 94       	dec	r0
 3d6:	e2 f7       	brpl	.-8      	; 0x3d0 <write_data_port+0x82>
 3d8:	a0 ff       	sbrs	r26, 0
 3da:	0b c0       	rjmp	.+22     	; 0x3f2 <write_data_port+0xa4>
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
 3dc:	95 b1       	in	r25, 0x05	; 5
 3de:	41 e0       	ldi	r20, 0x01	; 1
 3e0:	50 e0       	ldi	r21, 0x00	; 0
 3e2:	02 c0       	rjmp	.+4      	; 0x3e8 <write_data_port+0x9a>
 3e4:	44 0f       	add	r20, r20
 3e6:	55 1f       	adc	r21, r21
 3e8:	3a 95       	dec	r19
 3ea:	e2 f7       	brpl	.-8      	; 0x3e4 <write_data_port+0x96>
 3ec:	49 2b       	or	r20, r25
 3ee:	45 b9       	out	0x05, r20	; 5
 3f0:	2f c0       	rjmp	.+94     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
	} else {
		VPORTB.OUT &= ~(1 << pin);
 3f2:	95 b1       	in	r25, 0x05	; 5
 3f4:	41 e0       	ldi	r20, 0x01	; 1
 3f6:	50 e0       	ldi	r21, 0x00	; 0
 3f8:	02 c0       	rjmp	.+4      	; 0x3fe <write_data_port+0xb0>
 3fa:	44 0f       	add	r20, r20
 3fc:	55 1f       	adc	r21, r21
 3fe:	3a 95       	dec	r19
 400:	e2 f7       	brpl	.-8      	; 0x3fa <write_data_port+0xac>
 402:	40 95       	com	r20
 404:	49 23       	and	r20, r25
 406:	45 b9       	out	0x05, r20	; 5
 408:	23 c0       	rjmp	.+70     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
				PORTB_set_pin_level(pin, true);
			} else {
				PORTB_set_pin_level(pin, false);
			}
		} else if (port == 2) {
 40a:	92 30       	cpi	r25, 0x02	; 2
 40c:	09 f5       	brne	.+66     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
			if (data & 1 << i) {
 40e:	e6 2f       	mov	r30, r22
 410:	f0 e0       	ldi	r31, 0x00	; 0
 412:	df 01       	movw	r26, r30
 414:	02 2e       	mov	r0, r18
 416:	02 c0       	rjmp	.+4      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 418:	b5 95       	asr	r27
 41a:	a7 95       	ror	r26
 41c:	0a 94       	dec	r0
 41e:	e2 f7       	brpl	.-8      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 420:	a0 ff       	sbrs	r26, 0
 422:	0b c0       	rjmp	.+22     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
 424:	99 b1       	in	r25, 0x09	; 9
 426:	41 e0       	ldi	r20, 0x01	; 1
 428:	50 e0       	ldi	r21, 0x00	; 0
 42a:	02 c0       	rjmp	.+4      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 42c:	44 0f       	add	r20, r20
 42e:	55 1f       	adc	r21, r21
 430:	3a 95       	dec	r19
 432:	e2 f7       	brpl	.-8      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 434:	49 2b       	or	r20, r25
 436:	49 b9       	out	0x09, r20	; 9
 438:	0b c0       	rjmp	.+22     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
	} else {
		VPORTC.OUT &= ~(1 << pin);
 43a:	99 b1       	in	r25, 0x09	; 9
 43c:	41 e0       	ldi	r20, 0x01	; 1
 43e:	50 e0       	ldi	r21, 0x00	; 0
 440:	02 c0       	rjmp	.+4      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 442:	44 0f       	add	r20, r20
 444:	55 1f       	adc	r21, r21
 446:	3a 95       	dec	r19
 448:	e2 f7       	brpl	.-8      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 44a:	40 95       	com	r20
 44c:	49 23       	and	r20, r25
 44e:	49 b9       	out	0x09, r20	; 9
	uint8_t pin;
	uint8_t port;

	if (PORT_num != 0 && PORT_num != 1) return;

	for (uint8_t i=0; i<8; i++) {
 450:	2f 5f       	subi	r18, 0xFF	; 255
 452:	28 30       	cpi	r18, 0x08	; 8
 454:	08 f4       	brcc	.+2      	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 456:	80 cf       	rjmp	.-256    	; 0x358 <write_data_port+0xa>
 458:	08 95       	ret

0000045a <write_config_port>:
void write_config_port(uint8_t PORT_num, uint8_t data)
{
	uint8_t pin;
	uint8_t port;

	if (PORT_num != 0 && PORT_num != 1) return;
 45a:	82 30       	cpi	r24, 0x02	; 2
 45c:	08 f0       	brcs	.+2      	; 0x460 <write_config_port+0x6>
 45e:	a8 c0       	rjmp	.+336    	; 0x5b0 <write_config_port+0x156>
 460:	20 e0       	ldi	r18, 0x00	; 0
 462:	a3 c0       	rjmp	.+326    	; 0x5aa <write_config_port+0x150>

	for (uint8_t i=0; i<8; i++) {
		pin = PORT_pins[PORT_num][i] & 0x07;
 464:	e8 2f       	mov	r30, r24
 466:	f0 e0       	ldi	r31, 0x00	; 0
 468:	ee 0f       	add	r30, r30
 46a:	ff 1f       	adc	r31, r31
 46c:	ee 0f       	add	r30, r30
 46e:	ff 1f       	adc	r31, r31
 470:	ee 0f       	add	r30, r30
 472:	ff 1f       	adc	r31, r31
 474:	ec 5f       	subi	r30, 0xFC	; 252
 476:	f1 4c       	sbci	r31, 0xC1	; 193
 478:	e2 0f       	add	r30, r18
 47a:	f1 1d       	adc	r31, r1
 47c:	90 81       	ld	r25, Z
 47e:	e9 2f       	mov	r30, r25
 480:	e7 70       	andi	r30, 0x07	; 7
		port = PORT_pins[PORT_num][i] >> 4;
 482:	92 95       	swap	r25
 484:	9f 70       	andi	r25, 0x0F	; 15
		if (port == 0) {
 486:	79 f5       	brne	.+94     	; 0x4e6 <write_config_port+0x8c>
			if (data & 1 << pin) {
 488:	46 2f       	mov	r20, r22
 48a:	50 e0       	ldi	r21, 0x00	; 0
 48c:	0e 2e       	mov	r0, r30
 48e:	02 c0       	rjmp	.+4      	; 0x494 <write_config_port+0x3a>
 490:	55 95       	asr	r21
 492:	47 95       	ror	r20
 494:	0a 94       	dec	r0
 496:	e2 f7       	brpl	.-8      	; 0x490 <write_config_port+0x36>
 498:	40 ff       	sbrs	r20, 0
 49a:	13 c0       	rjmp	.+38     	; 0x4c2 <write_config_port+0x68>
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
 49c:	90 b1       	in	r25, 0x00	; 0
 49e:	41 e0       	ldi	r20, 0x01	; 1
 4a0:	50 e0       	ldi	r21, 0x00	; 0
 4a2:	0e 2e       	mov	r0, r30
 4a4:	02 c0       	rjmp	.+4      	; 0x4aa <write_config_port+0x50>
 4a6:	44 0f       	add	r20, r20
 4a8:	55 1f       	adc	r21, r21
 4aa:	0a 94       	dec	r0
 4ac:	e2 f7       	brpl	.-8      	; 0x4a6 <write_config_port+0x4c>
 4ae:	40 95       	com	r20
 4b0:	49 23       	and	r20, r25
 4b2:	40 b9       	out	0x00, r20	; 0
 * \param[in] pin       The pin number within port
 * \param[in] pull_mode Pin pull mode
 */
static inline void PORTA_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);
 4b4:	f0 e0       	ldi	r31, 0x00	; 0
 4b6:	e0 5f       	subi	r30, 0xF0	; 240
 4b8:	fb 4f       	sbci	r31, 0xFB	; 251

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
 4ba:	90 81       	ld	r25, Z
 4bc:	98 60       	ori	r25, 0x08	; 8
 4be:	90 83       	st	Z, r25
 4c0:	73 c0       	rjmp	.+230    	; 0x5a8 <write_config_port+0x14e>
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
 4c2:	90 b1       	in	r25, 0x00	; 0
 4c4:	41 e0       	ldi	r20, 0x01	; 1
 4c6:	50 e0       	ldi	r21, 0x00	; 0
 4c8:	0e 2e       	mov	r0, r30
 4ca:	02 c0       	rjmp	.+4      	; 0x4d0 <write_config_port+0x76>
 4cc:	44 0f       	add	r20, r20
 4ce:	55 1f       	adc	r21, r21
 4d0:	0a 94       	dec	r0
 4d2:	e2 f7       	brpl	.-8      	; 0x4cc <write_config_port+0x72>
 4d4:	49 2b       	or	r20, r25
 4d6:	40 b9       	out	0x00, r20	; 0
 * \param[in] pin       The pin number within port
 * \param[in] pull_mode Pin pull mode
 */
static inline void PORTA_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);
 4d8:	f0 e0       	ldi	r31, 0x00	; 0
 4da:	e0 5f       	subi	r30, 0xF0	; 240
 4dc:	fb 4f       	sbci	r31, 0xFB	; 251

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
 4de:	90 81       	ld	r25, Z
 4e0:	97 7f       	andi	r25, 0xF7	; 247
 4e2:	90 83       	st	Z, r25
 4e4:	61 c0       	rjmp	.+194    	; 0x5a8 <write_config_port+0x14e>
				PORTA_set_pin_pull_mode(pin, PORT_PULL_UP);
			} else {
				PORTA_set_pin_dir(pin, PORT_DIR_OUT);
				PORTA_set_pin_pull_mode(pin, PORT_PULL_OFF);
			}
		} else if (port == 1) {
 4e6:	91 30       	cpi	r25, 0x01	; 1
 4e8:	79 f5       	brne	.+94     	; 0x548 <write_config_port+0xee>
			if (data & 1 << pin) {
 4ea:	46 2f       	mov	r20, r22
 4ec:	50 e0       	ldi	r21, 0x00	; 0
 4ee:	0e 2e       	mov	r0, r30
 4f0:	02 c0       	rjmp	.+4      	; 0x4f6 <write_config_port+0x9c>
 4f2:	55 95       	asr	r21
 4f4:	47 95       	ror	r20
 4f6:	0a 94       	dec	r0
 4f8:	e2 f7       	brpl	.-8      	; 0x4f2 <write_config_port+0x98>
 4fa:	40 ff       	sbrs	r20, 0
 4fc:	13 c0       	rjmp	.+38     	; 0x524 <write_config_port+0xca>
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
 4fe:	94 b1       	in	r25, 0x04	; 4
 500:	41 e0       	ldi	r20, 0x01	; 1
 502:	50 e0       	ldi	r21, 0x00	; 0
 504:	0e 2e       	mov	r0, r30
 506:	02 c0       	rjmp	.+4      	; 0x50c <write_config_port+0xb2>
 508:	44 0f       	add	r20, r20
 50a:	55 1f       	adc	r21, r21
 50c:	0a 94       	dec	r0
 50e:	e2 f7       	brpl	.-8      	; 0x508 <write_config_port+0xae>
 510:	40 95       	com	r20
 512:	49 23       	and	r20, r25
 514:	44 b9       	out	0x04, r20	; 4
 * \param[in] pin       The pin number within port
 * \param[in] pull_mode Pin pull mode
 */
static inline void PORTB_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);
 516:	f0 e0       	ldi	r31, 0x00	; 0
 518:	e0 5d       	subi	r30, 0xD0	; 208
 51a:	fb 4f       	sbci	r31, 0xFB	; 251

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
 51c:	90 81       	ld	r25, Z
 51e:	98 60       	ori	r25, 0x08	; 8
 520:	90 83       	st	Z, r25
 522:	42 c0       	rjmp	.+132    	; 0x5a8 <write_config_port+0x14e>
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
 524:	94 b1       	in	r25, 0x04	; 4
 526:	41 e0       	ldi	r20, 0x01	; 1
 528:	50 e0       	ldi	r21, 0x00	; 0
 52a:	0e 2e       	mov	r0, r30
 52c:	02 c0       	rjmp	.+4      	; 0x532 <write_config_port+0xd8>
 52e:	44 0f       	add	r20, r20
 530:	55 1f       	adc	r21, r21
 532:	0a 94       	dec	r0
 534:	e2 f7       	brpl	.-8      	; 0x52e <write_config_port+0xd4>
 536:	49 2b       	or	r20, r25
 538:	44 b9       	out	0x04, r20	; 4
 * \param[in] pin       The pin number within port
 * \param[in] pull_mode Pin pull mode
 */
static inline void PORTB_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);
 53a:	f0 e0       	ldi	r31, 0x00	; 0
 53c:	e0 5d       	subi	r30, 0xD0	; 208
 53e:	fb 4f       	sbci	r31, 0xFB	; 251

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
 540:	90 81       	ld	r25, Z
 542:	97 7f       	andi	r25, 0xF7	; 247
 544:	90 83       	st	Z, r25
 546:	30 c0       	rjmp	.+96     	; 0x5a8 <write_config_port+0x14e>
				PORTB_set_pin_pull_mode(pin, PORT_PULL_UP);
			} else {
				PORTB_set_pin_dir(pin, PORT_DIR_OUT);
				PORTB_set_pin_pull_mode(pin, PORT_PULL_OFF);
			}
		} else if (port == 2) {
 548:	92 30       	cpi	r25, 0x02	; 2
 54a:	71 f5       	brne	.+92     	; 0x5a8 <write_config_port+0x14e>
			if (data & 1 << pin) {
 54c:	46 2f       	mov	r20, r22
 54e:	50 e0       	ldi	r21, 0x00	; 0
 550:	0e 2e       	mov	r0, r30
 552:	02 c0       	rjmp	.+4      	; 0x558 <write_config_port+0xfe>
 554:	55 95       	asr	r21
 556:	47 95       	ror	r20
 558:	0a 94       	dec	r0
 55a:	e2 f7       	brpl	.-8      	; 0x554 <write_config_port+0xfa>
 55c:	40 ff       	sbrs	r20, 0
 55e:	13 c0       	rjmp	.+38     	; 0x586 <write_config_port+0x12c>
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
 560:	98 b1       	in	r25, 0x08	; 8
 562:	41 e0       	ldi	r20, 0x01	; 1
 564:	50 e0       	ldi	r21, 0x00	; 0
 566:	0e 2e       	mov	r0, r30
 568:	02 c0       	rjmp	.+4      	; 0x56e <write_config_port+0x114>
 56a:	44 0f       	add	r20, r20
 56c:	55 1f       	adc	r21, r21
 56e:	0a 94       	dec	r0
 570:	e2 f7       	brpl	.-8      	; 0x56a <write_config_port+0x110>
 572:	40 95       	com	r20
 574:	49 23       	and	r20, r25
 576:	48 b9       	out	0x08, r20	; 8
 * \param[in] pin       The pin number within port
 * \param[in] pull_mode Pin pull mode
 */
static inline void PORTC_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);
 578:	f0 e0       	ldi	r31, 0x00	; 0
 57a:	e0 5b       	subi	r30, 0xB0	; 176
 57c:	fb 4f       	sbci	r31, 0xFB	; 251

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
 57e:	90 81       	ld	r25, Z
 580:	98 60       	ori	r25, 0x08	; 8
 582:	90 83       	st	Z, r25
 584:	11 c0       	rjmp	.+34     	; 0x5a8 <write_config_port+0x14e>
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
 586:	98 b1       	in	r25, 0x08	; 8
 588:	41 e0       	ldi	r20, 0x01	; 1
 58a:	50 e0       	ldi	r21, 0x00	; 0
 58c:	0e 2e       	mov	r0, r30
 58e:	02 c0       	rjmp	.+4      	; 0x594 <write_config_port+0x13a>
 590:	44 0f       	add	r20, r20
 592:	55 1f       	adc	r21, r21
 594:	0a 94       	dec	r0
 596:	e2 f7       	brpl	.-8      	; 0x590 <write_config_port+0x136>
 598:	49 2b       	or	r20, r25
 59a:	48 b9       	out	0x08, r20	; 8
 * \param[in] pin       The pin number within port
 * \param[in] pull_mode Pin pull mode
 */
static inline void PORTC_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);
 59c:	f0 e0       	ldi	r31, 0x00	; 0
 59e:	e0 5b       	subi	r30, 0xB0	; 176
 5a0:	fb 4f       	sbci	r31, 0xFB	; 251

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
 5a2:	90 81       	ld	r25, Z
 5a4:	97 7f       	andi	r25, 0xF7	; 247
 5a6:	90 83       	st	Z, r25
	uint8_t pin;
	uint8_t port;

	if (PORT_num != 0 && PORT_num != 1) return;

	for (uint8_t i=0; i<8; i++) {
 5a8:	2f 5f       	subi	r18, 0xFF	; 255
 5aa:	28 30       	cpi	r18, 0x08	; 8
 5ac:	08 f4       	brcc	.+2      	; 0x5b0 <write_config_port+0x156>
 5ae:	5a cf       	rjmp	.-332    	; 0x464 <write_config_port+0xa>
 5b0:	08 95       	ret

000005b2 <I2C_write_handler>:
		}
	}
}

void I2C_write_handler()
{
 5b2:	cf 93       	push	r28
	uint8_t data;

	data = I2C_0_read();
 5b4:	6f d1       	rcall	.+734    	; 0x894 <I2C_0_read>
 5b6:	c8 2f       	mov	r28, r24
	I2C_0_send_ack();
 5b8:	77 d1       	rcall	.+750    	; 0x8a8 <I2C_0_send_ack>
	if (data_count == 0xffff) { // register (command)
 5ba:	20 91 99 3f 	lds	r18, 0x3F99	; 0x803f99 <data_count>
 5be:	30 91 9a 3f 	lds	r19, 0x3F9A	; 0x803f9a <data_count+0x1>
 5c2:	2f 3f       	cpi	r18, 0xFF	; 255
 5c4:	8f ef       	ldi	r24, 0xFF	; 255
 5c6:	38 07       	cpc	r19, r24
 5c8:	49 f4       	brne	.+18     	; 0x5dc <I2C_write_handler+0x2a>
		reg = data;
 5ca:	c0 93 98 3f 	sts	0x3F98, r28	; 0x803f98 <reg>
		data_count++;
 5ce:	2f 5f       	subi	r18, 0xFF	; 255
 5d0:	3f 4f       	sbci	r19, 0xFF	; 255
 5d2:	20 93 99 3f 	sts	0x3F99, r18	; 0x803f99 <data_count>
 5d6:	30 93 9a 3f 	sts	0x3F9A, r19	; 0x803f9a <data_count+0x1>
		return;
 5da:	58 c0       	rjmp	.+176    	; 0x68c <I2C_write_handler+0xda>
	}

	if (i2c_saddr >> 1 == I2C_LED_SADDR) {
 5dc:	80 91 97 3f 	lds	r24, 0x3F97	; 0x803f97 <i2c_saddr>
 5e0:	86 95       	lsr	r24
 5e2:	80 33       	cpi	r24, 0x30	; 48
 5e4:	b9 f4       	brne	.+46     	; 0x614 <I2C_write_handler+0x62>
		if (reg == Update_LEDs_REG) { // Update LEDs
 5e6:	40 91 98 3f 	lds	r20, 0x3F98	; 0x803f98 <reg>
 5ea:	4f 3f       	cpi	r20, 0xFF	; 255
 5ec:	19 f4       	brne	.+6      	; 0x5f4 <I2C_write_handler+0x42>
			num_LEDs = data;
 5ee:	c0 93 16 3e 	sts	0x3E16, r28	; 0x803e16 <__data_end>
 5f2:	10 c0       	rjmp	.+32     	; 0x614 <I2C_write_handler+0x62>
		} else if (reg * 3 + data_count < Max_LEDs * 3) { // LED data
 5f4:	50 e0       	ldi	r21, 0x00	; 0
 5f6:	ba 01       	movw	r22, r20
 5f8:	66 0f       	add	r22, r22
 5fa:	77 1f       	adc	r23, r23
 5fc:	46 0f       	add	r20, r22
 5fe:	57 1f       	adc	r21, r23
 600:	42 0f       	add	r20, r18
 602:	53 1f       	adc	r21, r19
 604:	40 38       	cpi	r20, 0x80	; 128
 606:	91 e0       	ldi	r25, 0x01	; 1
 608:	59 07       	cpc	r21, r25
 60a:	20 f4       	brcc	.+8      	; 0x614 <I2C_write_handler+0x62>
			LED_data[reg * 3 + data_count] = data;
 60c:	fa 01       	movw	r30, r20
 60e:	e9 5e       	subi	r30, 0xE9	; 233
 610:	f1 4c       	sbci	r31, 0xC1	; 193
 612:	c0 83       	st	Z, r28
		}
	}

	if (i2c_saddr >> 1 == I2C_IOE_SADDR) {
 614:	80 32       	cpi	r24, 0x20	; 32
 616:	89 f5       	brne	.+98     	; 0x67a <I2C_write_handler+0xc8>
		if (reg == 0x02 || reg == 0x03) { // Output register
 618:	80 91 98 3f 	lds	r24, 0x3F98	; 0x803f98 <reg>
 61c:	9e ef       	ldi	r25, 0xFE	; 254
 61e:	98 0f       	add	r25, r24
 620:	92 30       	cpi	r25, 0x02	; 2
 622:	a0 f4       	brcc	.+40     	; 0x64c <I2C_write_handler+0x9a>
			if (reg + data_count == 0x02) {
 624:	28 0f       	add	r18, r24
 626:	31 1d       	adc	r19, r1
 628:	22 30       	cpi	r18, 0x02	; 2
 62a:	31 05       	cpc	r19, r1
 62c:	31 f4       	brne	.+12     	; 0x63a <I2C_write_handler+0x88>
				OUT_REG[0] = data;
 62e:	c0 93 02 3e 	sts	0x3E02, r28	; 0x803e02 <OUT_REG>
				write_data_port(0, data);
 632:	6c 2f       	mov	r22, r28
 634:	80 e0       	ldi	r24, 0x00	; 0
 636:	8b de       	rcall	.-746    	; 0x34e <write_data_port>
 638:	20 c0       	rjmp	.+64     	; 0x67a <I2C_write_handler+0xc8>
			} else if (reg + data_count == 0x03) {
 63a:	23 30       	cpi	r18, 0x03	; 3
 63c:	31 05       	cpc	r19, r1
 63e:	e9 f4       	brne	.+58     	; 0x67a <I2C_write_handler+0xc8>
				OUT_REG[1] = data;
 640:	c0 93 03 3e 	sts	0x3E03, r28	; 0x803e03 <OUT_REG+0x1>
				write_data_port(1, data);
 644:	6c 2f       	mov	r22, r28
 646:	81 e0       	ldi	r24, 0x01	; 1
 648:	82 de       	rcall	.-764    	; 0x34e <write_data_port>
 64a:	17 c0       	rjmp	.+46     	; 0x67a <I2C_write_handler+0xc8>
			}			
		} else if (reg == 0x06 || reg == 0x07) { // Configuration register
 64c:	9a ef       	ldi	r25, 0xFA	; 250
 64e:	98 0f       	add	r25, r24
 650:	92 30       	cpi	r25, 0x02	; 2
 652:	98 f4       	brcc	.+38     	; 0x67a <I2C_write_handler+0xc8>
			if (reg + data_count == 0x06) {
 654:	28 0f       	add	r18, r24
 656:	31 1d       	adc	r19, r1
 658:	26 30       	cpi	r18, 0x06	; 6
 65a:	31 05       	cpc	r19, r1
 65c:	31 f4       	brne	.+12     	; 0x66a <I2C_write_handler+0xb8>
				CONF_REG[0] = data;
 65e:	c0 93 00 3e 	sts	0x3E00, r28	; 0x803e00 <__DATA_REGION_ORIGIN__>
				write_config_port(0, data);
 662:	6c 2f       	mov	r22, r28
 664:	80 e0       	ldi	r24, 0x00	; 0
 666:	f9 de       	rcall	.-526    	; 0x45a <write_config_port>
 668:	08 c0       	rjmp	.+16     	; 0x67a <I2C_write_handler+0xc8>
			} else if (reg + data_count == 0x07) {
 66a:	27 30       	cpi	r18, 0x07	; 7
 66c:	31 05       	cpc	r19, r1
 66e:	29 f4       	brne	.+10     	; 0x67a <I2C_write_handler+0xc8>
				CONF_REG[1] = data;
 670:	c0 93 01 3e 	sts	0x3E01, r28	; 0x803e01 <__DATA_REGION_ORIGIN__+0x1>
				write_config_port(1, data);
 674:	6c 2f       	mov	r22, r28
 676:	81 e0       	ldi	r24, 0x01	; 1
 678:	f0 de       	rcall	.-544    	; 0x45a <write_config_port>
			}
		}
	}

	data_count++;
 67a:	80 91 99 3f 	lds	r24, 0x3F99	; 0x803f99 <data_count>
 67e:	90 91 9a 3f 	lds	r25, 0x3F9A	; 0x803f9a <data_count+0x1>
 682:	01 96       	adiw	r24, 0x01	; 1
 684:	80 93 99 3f 	sts	0x3F99, r24	; 0x803f99 <data_count>
 688:	90 93 9a 3f 	sts	0x3F9A, r25	; 0x803f9a <data_count+0x1>
}
 68c:	cf 91       	pop	r28
 68e:	08 95       	ret

00000690 <main>:
}

int main(void)
{
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
 690:	ed dc       	rcall	.-1574   	; 0x6c <atmel_start_init>

	/* I2C callbacks */
	I2C_0_set_read_callback(I2C_read_handler);
 692:	89 e2       	ldi	r24, 0x29	; 41
 694:	91 e0       	ldi	r25, 0x01	; 1
 696:	1c d1       	rcall	.+568    	; 0x8d0 <I2C_0_set_read_callback>
	I2C_0_set_write_callback(I2C_write_handler);
 698:	89 ed       	ldi	r24, 0xD9	; 217
 69a:	92 e0       	ldi	r25, 0x02	; 2
 69c:	26 d1       	rcall	.+588    	; 0x8ea <I2C_0_set_write_callback>
	I2C_0_set_address_callback(I2C_address_handler);
 69e:	89 e3       	ldi	r24, 0x39	; 57
 6a0:	90 e0       	ldi	r25, 0x00	; 0
 6a2:	30 d1       	rcall	.+608    	; 0x904 <I2C_0_set_address_callback>
	I2C_0_set_stop_callback(I2C_stop_handler);
 6a4:	8f e7       	ldi	r24, 0x7F	; 127
 6a6:	90 e0       	ldi	r25, 0x00	; 0
 6a8:	3a d1       	rcall	.+628    	; 0x91e <I2C_0_set_stop_callback>
	I2C_0_set_collision_callback(I2C_error_handler);
 6aa:	88 e3       	ldi	r24, 0x38	; 56
 6ac:	90 e0       	ldi	r25, 0x00	; 0
 6ae:	44 d1       	rcall	.+648    	; 0x938 <I2C_0_set_collision_callback>
	I2C_0_set_bus_error_callback(I2C_error_handler);
 6b0:	88 e3       	ldi	r24, 0x38	; 56
 6b2:	90 e0       	ldi	r25, 0x00	; 0
 6b4:	b2 d1       	rcall	.+868    	; 0xa1a <I2C_0_set_bus_error_callback>

	/* Sleep mode */
	set_sleep_mode(Sleep_Mode);
 6b6:	e0 e5       	ldi	r30, 0x50	; 80
 6b8:	f0 e0       	ldi	r31, 0x00	; 0
 6ba:	80 81       	ld	r24, Z
 6bc:	89 7f       	andi	r24, 0xF9	; 249
 6be:	84 60       	ori	r24, 0x04	; 4
 6c0:	80 83       	st	Z, r24
	ENABLE_INTERRUPTS();
 6c2:	78 94       	sei
	sleep_mode();
 6c4:	80 81       	ld	r24, Z
 6c6:	81 60       	ori	r24, 0x01	; 1
 6c8:	80 83       	st	Z, r24
 6ca:	88 95       	sleep
 6cc:	80 81       	ld	r24, Z
 6ce:	8e 7f       	andi	r24, 0xFE	; 254
 6d0:	80 83       	st	Z, r24

	/* Initialize ports */
    write_data_port(0, OUT_REG[0]);
 6d2:	c2 e0       	ldi	r28, 0x02	; 2
 6d4:	de e3       	ldi	r29, 0x3E	; 62
 6d6:	68 81       	ld	r22, Y
 6d8:	80 e0       	ldi	r24, 0x00	; 0
 6da:	39 de       	rcall	.-910    	; 0x34e <write_data_port>
	write_data_port(1, OUT_REG[1]);
 6dc:	69 81       	ldd	r22, Y+1	; 0x01
 6de:	81 e0       	ldi	r24, 0x01	; 1
 6e0:	36 de       	rcall	.-916    	; 0x34e <write_data_port>
	write_config_port(0, CONF_REG[0]);
 6e2:	c0 e0       	ldi	r28, 0x00	; 0
 6e4:	de e3       	ldi	r29, 0x3E	; 62
 6e6:	68 81       	ld	r22, Y
 6e8:	80 e0       	ldi	r24, 0x00	; 0
 6ea:	b7 de       	rcall	.-658    	; 0x45a <write_config_port>
	write_config_port(1, CONF_REG[1]);
 6ec:	69 81       	ldd	r22, Y+1	; 0x01
 6ee:	81 e0       	ldi	r24, 0x01	; 1
 6f0:	b4 de       	rcall	.-664    	; 0x45a <write_config_port>
 6f2:	ff cf       	rjmp	.-2      	; 0x6f2 <main+0x62>

000006f4 <BOD_init>:
	//		 | BOD_VLMCFG_BELOW_gc; /* Interrupt when supply goes below VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
}
 6f4:	80 e0       	ldi	r24, 0x00	; 0
 6f6:	08 95       	ret

000006f8 <DIGITAL_GLUE_LOGIC_0_init>:
	//		 | CCL_EDGEDET_DIS_gc /* Edge detector is disabled */
	//		 | CCL_FILTSEL_DISABLE_gc /* Filter disabled */
	//		 | 0 << CCL_ENABLE_bp /* LUT Enable: disabled */
	//		 | 0 << CCL_OUTEN_bp; /* Output Enable: disabled */

	CCL.TRUTH1 = 168; /* Truth 1: 168 */
 6f8:	e0 ec       	ldi	r30, 0xC0	; 192
 6fa:	f1 e0       	ldi	r31, 0x01	; 1
 6fc:	88 ea       	ldi	r24, 0xA8	; 168
 6fe:	84 87       	std	Z+12, r24	; 0x0c

	CCL.LUT1CTRLC = CCL_INSEL2_TCA0_gc /* TCA0 WO2 input source */;
 700:	88 e0       	ldi	r24, 0x08	; 8
 702:	83 87       	std	Z+11, r24	; 0x0b

	CCL.LUT1CTRLB = CCL_INSEL0_SPI0_gc /* SPI0 SCK source */
 704:	8b eb       	ldi	r24, 0xBB	; 187
 706:	82 87       	std	Z+10, r24	; 0x0a
	                | CCL_INSEL1_SPI0_gc /* SPI0 MOSI input source */;

	CCL.LUT1CTRLA = 0 << CCL_CLKSRC_bp       /* Clock Source Selection: disabled */
 708:	89 e0       	ldi	r24, 0x09	; 9
 70a:	81 87       	std	Z+9, r24	; 0x09
	                | CCL_EDGEDET_DIS_gc     /* Edge detector is disabled */
	                | CCL_FILTSEL_DISABLE_gc /* Filter disabled */
	                | 1 << CCL_ENABLE_bp     /* LUT Enable: enabled */
	                | 1 << CCL_OUTEN_bp;     /* Output Enable: enabled */

	CCL.CTRLA = 1 << CCL_ENABLE_bp      /* Enable: enabled */
 70c:	81 e4       	ldi	r24, 0x41	; 65
 70e:	80 83       	st	Z, r24
	            | 1 << CCL_RUNSTDBY_bp; /* Run in Standby: enabled */

	return 0;
}
 710:	80 e0       	ldi	r24, 0x00	; 0
 712:	08 95       	ret

00000714 <CLKCTRL_init>:
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_io(void *addr, uint8_t value)
{
	protected_write_io(addr, CCP_IOREG_gc, value);
 714:	41 e0       	ldi	r20, 0x01	; 1
 716:	68 ed       	ldi	r22, 0xD8	; 216
 718:	81 e6       	ldi	r24, 0x61	; 97
 71a:	90 e0       	ldi	r25, 0x00	; 0
 71c:	9e d1       	rcall	.+828    	; 0xa5a <protected_write_io>
	//		 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
}
 71e:	80 e0       	ldi	r24, 0x00	; 0
 720:	08 95       	ret

00000722 <CPUINT_init>:

	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	ENABLE_INTERRUPTS();
 722:	78 94       	sei

	return 0;
}
 724:	80 e0       	ldi	r24, 0x00	; 0
 726:	08 95       	ret

00000728 <mcu_init>:
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
 728:	80 e0       	ldi	r24, 0x00	; 0
 72a:	08 c0       	rjmp	.+16     	; 0x73c <mcu_init+0x14>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 72c:	e8 2f       	mov	r30, r24
 72e:	f0 e0       	ldi	r31, 0x00	; 0
 730:	e0 5f       	subi	r30, 0xF0	; 240
 732:	fb 4f       	sbci	r31, 0xFB	; 251
 734:	90 81       	ld	r25, Z
 736:	98 60       	ori	r25, 0x08	; 8
 738:	90 83       	st	Z, r25
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
 73a:	8f 5f       	subi	r24, 0xFF	; 255
 73c:	88 30       	cpi	r24, 0x08	; 8
 73e:	b0 f3       	brcs	.-20     	; 0x72c <mcu_init+0x4>
 740:	80 e0       	ldi	r24, 0x00	; 0
 742:	08 c0       	rjmp	.+16     	; 0x754 <mcu_init+0x2c>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 744:	e8 2f       	mov	r30, r24
 746:	f0 e0       	ldi	r31, 0x00	; 0
 748:	e0 5d       	subi	r30, 0xD0	; 208
 74a:	fb 4f       	sbci	r31, 0xFB	; 251
 74c:	90 81       	ld	r25, Z
 74e:	98 60       	ori	r25, 0x08	; 8
 750:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 752:	8f 5f       	subi	r24, 0xFF	; 255
 754:	88 30       	cpi	r24, 0x08	; 8
 756:	b0 f3       	brcs	.-20     	; 0x744 <mcu_init+0x1c>
 758:	80 e0       	ldi	r24, 0x00	; 0
 75a:	08 c0       	rjmp	.+16     	; 0x76c <mcu_init+0x44>
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
 75c:	e8 2f       	mov	r30, r24
 75e:	f0 e0       	ldi	r31, 0x00	; 0
 760:	e0 5b       	subi	r30, 0xB0	; 176
 762:	fb 4f       	sbci	r31, 0xFB	; 251
 764:	90 81       	ld	r25, Z
 766:	98 60       	ori	r25, 0x08	; 8
 768:	90 83       	st	Z, r25

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
 76a:	8f 5f       	subi	r24, 0xFF	; 255
 76c:	88 30       	cpi	r24, 0x08	; 8
 76e:	b0 f3       	brcs	.-20     	; 0x75c <mcu_init+0x34>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}
}
 770:	08 95       	ret

00000772 <TIMER_0_initialization>:
#include <system.h>

void TIMER_0_initialization(void)
{

	TIMER_0_init();
 772:	81 d1       	rcall	.+770    	; 0xa76 <TIMER_0_init>
 774:	08 95       	ret

00000776 <DIGITAL_GLUE_LOGIC_0_initialization>:
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
 776:	89 b1       	in	r24, 0x09	; 9
 778:	8d 7f       	andi	r24, 0xFD	; 253
 77a:	89 b9       	out	0x09, r24	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
 77c:	88 b1       	in	r24, 0x08	; 8
 77e:	82 60       	ori	r24, 0x02	; 2
 780:	88 b9       	out	0x08, r24	; 8
void DIGITAL_GLUE_LOGIC_0_initialization(void)
{

	PC1_set_level(false);
	PC1_set_dir(PORT_DIR_OUT);
	PORTMUX.CTRLA |= PORTMUX_LUT1_bm;
 782:	e0 e0       	ldi	r30, 0x00	; 0
 784:	f2 e0       	ldi	r31, 0x02	; 2
 786:	80 81       	ld	r24, Z
 788:	80 62       	ori	r24, 0x20	; 32
 78a:	80 83       	st	Z, r24

	DIGITAL_GLUE_LOGIC_0_init();
 78c:	b5 df       	rcall	.-150    	; 0x6f8 <DIGITAL_GLUE_LOGIC_0_init>
 78e:	08 95       	ret

00000790 <SPI_0_initialization>:
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
 790:	88 b1       	in	r24, 0x08	; 8
 792:	8d 7f       	andi	r24, 0xFD	; 253
 794:	88 b9       	out	0x08, r24	; 8
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
 796:	e1 e5       	ldi	r30, 0x51	; 81
 798:	f4 e0       	ldi	r31, 0x04	; 4
 79a:	80 81       	ld	r24, Z
 79c:	87 7f       	andi	r24, 0xF7	; 247
 79e:	80 83       	st	Z, r24
	    // <PORT_PULL_OFF"> Off
	    // <PORT_PULL_UP"> Pull-up
	    PORT_PULL_OFF);

	/* set the alternate pin mux */
	PORTMUX.CTRLB |= PORTMUX_SPI0_bm;
 7a0:	e0 e0       	ldi	r30, 0x00	; 0
 7a2:	f2 e0       	ldi	r31, 0x02	; 2
 7a4:	81 81       	ldd	r24, Z+1	; 0x01
 7a6:	84 60       	ori	r24, 0x04	; 4
 7a8:	81 83       	std	Z+1, r24	; 0x01
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
 7aa:	89 b1       	in	r24, 0x09	; 9
 7ac:	8b 7f       	andi	r24, 0xFB	; 251
 7ae:	89 b9       	out	0x09, r24	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
 7b0:	88 b1       	in	r24, 0x08	; 8
 7b2:	84 60       	ori	r24, 0x04	; 4
 7b4:	88 b9       	out	0x08, r24	; 8
	    false);

	PC2_set_dir(PORT_DIR_OUT);

	/* set the alternate pin mux */
	PORTMUX.CTRLB |= PORTMUX_SPI0_bm;
 7b6:	81 81       	ldd	r24, Z+1	; 0x01
 7b8:	84 60       	ori	r24, 0x04	; 4
 7ba:	81 83       	std	Z+1, r24	; 0x01
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
 7bc:	89 b1       	in	r24, 0x09	; 9
 7be:	8e 7f       	andi	r24, 0xFE	; 254
 7c0:	89 b9       	out	0x09, r24	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
 7c2:	88 b1       	in	r24, 0x08	; 8
 7c4:	81 60       	ori	r24, 0x01	; 1
 7c6:	88 b9       	out	0x08, r24	; 8
	    false);

	PC0_set_dir(PORT_DIR_OUT);

	/* set the alternate pin mux */
	PORTMUX.CTRLB |= PORTMUX_SPI0_bm;
 7c8:	81 81       	ldd	r24, Z+1	; 0x01
 7ca:	84 60       	ori	r24, 0x04	; 4
 7cc:	81 83       	std	Z+1, r24	; 0x01
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
 7ce:	89 b1       	in	r24, 0x09	; 9
 7d0:	87 7f       	andi	r24, 0xF7	; 247
 7d2:	89 b9       	out	0x09, r24	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
 7d4:	88 b1       	in	r24, 0x08	; 8
 7d6:	88 60       	ori	r24, 0x08	; 8
 7d8:	88 b9       	out	0x08, r24	; 8
	    false);

	PC3_set_dir(PORT_DIR_OUT);

	/* set the alternate pin mux */
	PORTMUX.CTRLB |= PORTMUX_SPI0_bm;
 7da:	81 81       	ldd	r24, Z+1	; 0x01
 7dc:	84 60       	ori	r24, 0x04	; 4
 7de:	81 83       	std	Z+1, r24	; 0x01

	SPI_0_init();
 7e0:	42 d1       	rcall	.+644    	; 0xa66 <SPI_0_init>
 7e2:	08 95       	ret

000007e4 <I2C_0_initialization>:
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
 7e4:	85 b1       	in	r24, 0x05	; 5
 7e6:	8e 7f       	andi	r24, 0xFE	; 254
 7e8:	85 b9       	out	0x05, r24	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
 7ea:	84 b1       	in	r24, 0x04	; 4
 7ec:	81 60       	ori	r24, 0x01	; 1
 7ee:	84 b9       	out	0x04, r24	; 4
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
 7f0:	e0 e3       	ldi	r30, 0x30	; 48
 7f2:	f4 e0       	ldi	r31, 0x04	; 4
 7f4:	80 81       	ld	r24, Z
 7f6:	87 7f       	andi	r24, 0xF7	; 247
 7f8:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (inverted) {
		*port_pin_ctrl |= PORT_INVEN_bm;
	} else {
		*port_pin_ctrl &= ~PORT_INVEN_bm;
 7fa:	80 81       	ld	r24, Z
 7fc:	8f 77       	andi	r24, 0x7F	; 127
 7fe:	80 83       	st	Z, r24
 */
static inline void PORTB_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
 800:	80 81       	ld	r24, Z
 802:	88 7f       	andi	r24, 0xF8	; 248
 804:	80 83       	st	Z, r24
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
 806:	85 b1       	in	r24, 0x05	; 5
 808:	8d 7f       	andi	r24, 0xFD	; 253
 80a:	85 b9       	out	0x05, r24	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
 80c:	84 b1       	in	r24, 0x04	; 4
 80e:	82 60       	ori	r24, 0x02	; 2
 810:	84 b9       	out	0x04, r24	; 4
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
 812:	e1 e3       	ldi	r30, 0x31	; 49
 814:	f4 e0       	ldi	r31, 0x04	; 4
 816:	80 81       	ld	r24, Z
 818:	87 7f       	andi	r24, 0xF7	; 247
 81a:	80 83       	st	Z, r24
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (inverted) {
		*port_pin_ctrl |= PORT_INVEN_bm;
	} else {
		*port_pin_ctrl &= ~PORT_INVEN_bm;
 81c:	80 81       	ld	r24, Z
 81e:	8f 77       	andi	r24, 0x7F	; 127
 820:	80 83       	st	Z, r24
 */
static inline void PORTB_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
 822:	80 81       	ld	r24, Z
 824:	88 7f       	andi	r24, 0xF8	; 248
 826:	80 83       	st	Z, r24
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
 828:	84 b1       	in	r24, 0x04	; 4
 82a:	8b 7f       	andi	r24, 0xFB	; 251
 82c:	84 b9       	out	0x04, r24	; 4
static inline void PORTB_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
 82e:	a2 e3       	ldi	r26, 0x32	; 50
 830:	b4 e0       	ldi	r27, 0x04	; 4
 832:	8c 91       	ld	r24, X
 834:	88 60       	ori	r24, 0x08	; 8
 836:	8c 93       	st	X, r24
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
 838:	88 b1       	in	r24, 0x08	; 8
 83a:	8b 7f       	andi	r24, 0xFB	; 251
 83c:	88 b9       	out	0x08, r24	; 8
static inline void PORTC_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
 83e:	e2 e5       	ldi	r30, 0x52	; 82
 840:	f4 e0       	ldi	r31, 0x04	; 4
 842:	80 81       	ld	r24, Z
 844:	88 60       	ori	r24, 0x08	; 8
 846:	80 83       	st	Z, r24
 *
 * Reads the level on pins connected to a port
 */
static inline bool PORTB_get_pin_level(const uint8_t pin)
{
	return VPORTB.IN & (1 << pin);
 848:	86 b1       	in	r24, 0x06	; 6
	// I2C address : PB2, PC2 = NC, NC (0x20) / NC, GND (0x21) / GND, NC (0x22) / GND, GND (0x23)
	PB2_set_dir(PORT_DIR_IN);
	PB2_set_pull_mode(PORT_PULL_UP);
	PC2_set_dir(PORT_DIR_IN);
	PC2_set_pull_mode(PORT_PULL_UP);
	uint8_t saddr = 0x20 + ((uint8_t)!PB2_get_level() << 1) + (uint8_t)!PC2_get_level(); // inverted
 84a:	86 95       	lsr	r24
 84c:	86 95       	lsr	r24
 84e:	91 e0       	ldi	r25, 0x01	; 1
 850:	89 27       	eor	r24, r25
 852:	81 70       	andi	r24, 0x01	; 1
 *
 * Reads the level on pins connected to a port
 */
static inline bool PORTC_get_pin_level(const uint8_t pin)
{
	return VPORTC.IN & (1 << pin);
 854:	2a b1       	in	r18, 0x0a	; 10
 856:	26 95       	lsr	r18
 858:	26 95       	lsr	r18
 85a:	92 27       	eor	r25, r18
 85c:	91 70       	andi	r25, 0x01	; 1
 85e:	88 0f       	add	r24, r24
 860:	89 0f       	add	r24, r25
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
		break;
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTB + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
 862:	9c 91       	ld	r25, X
 864:	98 60       	ori	r25, 0x08	; 8
 866:	9c 93       	st	X, r25
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
 868:	9c 91       	ld	r25, X
 86a:	97 7f       	andi	r25, 0xF7	; 247
 86c:	9c 93       	st	X, r25
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
		break;
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTC + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
 86e:	90 81       	ld	r25, Z
 870:	98 60       	ori	r25, 0x08	; 8
 872:	90 83       	st	Z, r25
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
 874:	90 81       	ld	r25, Z
 876:	97 7f       	andi	r25, 0xF7	; 247
 878:	90 83       	st	Z, r25
	PB2_set_dir(PORT_DIR_OFF);
	PB2_set_pull_mode(PORT_PULL_OFF);
	PC2_set_dir(PORT_DIR_OFF);
	PC2_set_pull_mode(PORT_PULL_OFF);

	I2C_0_init(saddr);
 87a:	80 5e       	subi	r24, 0xE0	; 224
 87c:	d3 d0       	rcall	.+422    	; 0xa24 <I2C_0_init>
 87e:	08 95       	ret

00000880 <system_init>:
/**
 * \brief System initialization
 */
void system_init()
{
	mcu_init();
 880:	53 df       	rcall	.-346    	; 0x728 <mcu_init>

	CLKCTRL_init();
 882:	48 df       	rcall	.-368    	; 0x714 <CLKCTRL_init>

	TIMER_0_initialization();
 884:	76 df       	rcall	.-276    	; 0x772 <TIMER_0_initialization>

	DIGITAL_GLUE_LOGIC_0_initialization();
 886:	77 df       	rcall	.-274    	; 0x776 <DIGITAL_GLUE_LOGIC_0_initialization>

	SPI_0_initialization();
 888:	83 df       	rcall	.-250    	; 0x790 <SPI_0_initialization>

	CPUINT_init();
 88a:	4b df       	rcall	.-362    	; 0x722 <CPUINT_init>

	SLPCTRL_init();
 88c:	ea d0       	rcall	.+468    	; 0xa62 <SLPCTRL_init>

	I2C_0_initialization();
 88e:	aa df       	rcall	.-172    	; 0x7e4 <I2C_0_initialization>

	BOD_init();
 890:	31 df       	rcall	.-414    	; 0x6f4 <BOD_init>
 892:	08 95       	ret

00000894 <I2C_0_read>:
 *
 * \return Nothing
 */
void I2C_0_send_nack(void)
{
	TWI0.SCTRLB = TWI_ACKACT_NACK_gc | TWI_SCMD_COMPTRANS_gc;
 894:	80 91 1d 08 	lds	r24, 0x081D	; 0x80081d <__RODATA_PM_OFFSET__+0x7f881d>
 898:	08 95       	ret

0000089a <I2C_0_write>:
 89a:	e0 e1       	ldi	r30, 0x10	; 16
 89c:	f8 e0       	ldi	r31, 0x08	; 8
 89e:	85 87       	std	Z+13, r24	; 0x0d
 8a0:	82 85       	ldd	r24, Z+10	; 0x0a
 8a2:	83 60       	ori	r24, 0x03	; 3
 8a4:	82 87       	std	Z+10, r24	; 0x0a
 8a6:	08 95       	ret

000008a8 <I2C_0_send_ack>:
 8a8:	83 e0       	ldi	r24, 0x03	; 3
 8aa:	80 93 1a 08 	sts	0x081A, r24	; 0x80081a <__RODATA_PM_OFFSET__+0x7f881a>
 8ae:	08 95       	ret

000008b0 <I2C_0_goto_unaddressed>:
 * \return Nothing
 */
void I2C_0_goto_unaddressed(void)
{
	// Reset module
	TWI0.SSTATUS |= (TWI_DIF_bm | TWI_APIF_bm);
 8b0:	e0 e1       	ldi	r30, 0x10	; 16
 8b2:	f8 e0       	ldi	r31, 0x08	; 8
 8b4:	83 85       	ldd	r24, Z+11	; 0x0b
 8b6:	80 6c       	ori	r24, 0xC0	; 192
 8b8:	83 87       	std	Z+11, r24	; 0x0b
	TWI0.SCTRLB = TWI_SCMD_COMPTRANS_gc;
 8ba:	82 e0       	ldi	r24, 0x02	; 2
 8bc:	82 87       	std	Z+10, r24	; 0x0a
 8be:	08 95       	ret

000008c0 <I2C_0_read_callback>:
}

// Read Event Interrupt Handlers
void I2C_0_read_callback(void)
{
	if (I2C_0_read_interrupt_handler) {
 8c0:	e0 91 9f 3f 	lds	r30, 0x3F9F	; 0x803f9f <I2C_0_read_interrupt_handler>
 8c4:	f0 91 a0 3f 	lds	r31, 0x3FA0	; 0x803fa0 <I2C_0_read_interrupt_handler+0x1>
 8c8:	30 97       	sbiw	r30, 0x00	; 0
 8ca:	09 f0       	breq	.+2      	; 0x8ce <I2C_0_read_callback+0xe>
		I2C_0_read_interrupt_handler();
 8cc:	09 95       	icall
 8ce:	08 95       	ret

000008d0 <I2C_0_set_read_callback>:
 *
 * \return Nothing
 */
void I2C_0_set_read_callback(I2C_0_callback handler)
{
	I2C_0_read_interrupt_handler = handler;
 8d0:	80 93 9f 3f 	sts	0x3F9F, r24	; 0x803f9f <I2C_0_read_interrupt_handler>
 8d4:	90 93 a0 3f 	sts	0x3FA0, r25	; 0x803fa0 <I2C_0_read_interrupt_handler+0x1>
 8d8:	08 95       	ret

000008da <I2C_0_write_callback>:
}

// Write Event Interrupt Handlers
void I2C_0_write_callback(void)
{
	if (I2C_0_write_interrupt_handler) {
 8da:	e0 91 9d 3f 	lds	r30, 0x3F9D	; 0x803f9d <I2C_0_write_interrupt_handler>
 8de:	f0 91 9e 3f 	lds	r31, 0x3F9E	; 0x803f9e <I2C_0_write_interrupt_handler+0x1>
 8e2:	30 97       	sbiw	r30, 0x00	; 0
 8e4:	09 f0       	breq	.+2      	; 0x8e8 <I2C_0_write_callback+0xe>
		I2C_0_write_interrupt_handler();
 8e6:	09 95       	icall
 8e8:	08 95       	ret

000008ea <I2C_0_set_write_callback>:
 *
 * \return Nothing
 */
void I2C_0_set_write_callback(I2C_0_callback handler)
{
	I2C_0_write_interrupt_handler = handler;
 8ea:	80 93 9d 3f 	sts	0x3F9D, r24	; 0x803f9d <I2C_0_write_interrupt_handler>
 8ee:	90 93 9e 3f 	sts	0x3F9E, r25	; 0x803f9e <I2C_0_write_interrupt_handler+0x1>
 8f2:	08 95       	ret

000008f4 <I2C_0_address_callback>:
}

// Address Event Interrupt Handlers
void I2C_0_address_callback(void)
{
	if (I2C_0_address_interrupt_handler) {
 8f4:	e0 91 a1 3f 	lds	r30, 0x3FA1	; 0x803fa1 <I2C_0_address_interrupt_handler>
 8f8:	f0 91 a2 3f 	lds	r31, 0x3FA2	; 0x803fa2 <I2C_0_address_interrupt_handler+0x1>
 8fc:	30 97       	sbiw	r30, 0x00	; 0
 8fe:	09 f0       	breq	.+2      	; 0x902 <I2C_0_address_callback+0xe>
		I2C_0_address_interrupt_handler();
 900:	09 95       	icall
 902:	08 95       	ret

00000904 <I2C_0_set_address_callback>:
 *
 * \return Nothing
 */
void I2C_0_set_address_callback(I2C_0_callback handler)
{
	I2C_0_address_interrupt_handler = handler;
 904:	80 93 a1 3f 	sts	0x3FA1, r24	; 0x803fa1 <I2C_0_address_interrupt_handler>
 908:	90 93 a2 3f 	sts	0x3FA2, r25	; 0x803fa2 <I2C_0_address_interrupt_handler+0x1>
 90c:	08 95       	ret

0000090e <I2C_0_stop_callback>:
}

// Stop Event Interrupt Handlers
void I2C_0_stop_callback(void)
{
	if (I2C_0_stop_interrupt_handler) {
 90e:	e0 91 9b 3f 	lds	r30, 0x3F9B	; 0x803f9b <I2C_0_stop_interrupt_handler>
 912:	f0 91 9c 3f 	lds	r31, 0x3F9C	; 0x803f9c <I2C_0_stop_interrupt_handler+0x1>
 916:	30 97       	sbiw	r30, 0x00	; 0
 918:	09 f0       	breq	.+2      	; 0x91c <I2C_0_stop_callback+0xe>
		I2C_0_stop_interrupt_handler();
 91a:	09 95       	icall
 91c:	08 95       	ret

0000091e <I2C_0_set_stop_callback>:
 *
 * \return Nothing
 */
void I2C_0_set_stop_callback(I2C_0_callback handler)
{
	I2C_0_stop_interrupt_handler = handler;
 91e:	80 93 9b 3f 	sts	0x3F9B, r24	; 0x803f9b <I2C_0_stop_interrupt_handler>
 922:	90 93 9c 3f 	sts	0x3F9C, r25	; 0x803f9c <I2C_0_stop_interrupt_handler+0x1>
 926:	08 95       	ret

00000928 <I2C_0_collision_callback>:
}

// Bus Collision Event Interrupt Handlers
void I2C_0_collision_callback(void)
{
	if (I2C_0_collision_interrupt_handler) {
 928:	e0 91 a5 3f 	lds	r30, 0x3FA5	; 0x803fa5 <I2C_0_collision_interrupt_handler>
 92c:	f0 91 a6 3f 	lds	r31, 0x3FA6	; 0x803fa6 <I2C_0_collision_interrupt_handler+0x1>
 930:	30 97       	sbiw	r30, 0x00	; 0
 932:	09 f0       	breq	.+2      	; 0x936 <I2C_0_collision_callback+0xe>
		I2C_0_collision_interrupt_handler();
 934:	09 95       	icall
 936:	08 95       	ret

00000938 <I2C_0_set_collision_callback>:
 *
 * \return Nothing
 */
void I2C_0_set_collision_callback(I2C_0_callback handler)
{
	I2C_0_collision_interrupt_handler = handler;
 938:	80 93 a5 3f 	sts	0x3FA5, r24	; 0x803fa5 <I2C_0_collision_interrupt_handler>
 93c:	90 93 a6 3f 	sts	0x3FA6, r25	; 0x803fa6 <I2C_0_collision_interrupt_handler+0x1>
 940:	08 95       	ret

00000942 <I2C_0_bus_error_callback>:
}

// Bus Error Event Interrupt Handlers
void I2C_0_bus_error_callback(void)
{
	if (I2C_0_bus_error_interrupt_handler) {
 942:	e0 91 a3 3f 	lds	r30, 0x3FA3	; 0x803fa3 <I2C_0_bus_error_interrupt_handler>
 946:	f0 91 a4 3f 	lds	r31, 0x3FA4	; 0x803fa4 <I2C_0_bus_error_interrupt_handler+0x1>
 94a:	30 97       	sbiw	r30, 0x00	; 0
 94c:	09 f0       	breq	.+2      	; 0x950 <I2C_0_bus_error_callback+0xe>
		I2C_0_bus_error_interrupt_handler();
 94e:	09 95       	icall
 950:	08 95       	ret

00000952 <I2C_0_isr>:
 */
void I2C_0_isr()
{
	static char isFirstByte = true; // to bypass the NACK flag for the first byte in a transaction

	if (TWI0.SSTATUS & TWI_COLL_bm) {
 952:	80 91 1b 08 	lds	r24, 0x081B	; 0x80081b <__RODATA_PM_OFFSET__+0x7f881b>
 956:	83 ff       	sbrs	r24, 3
 958:	02 c0       	rjmp	.+4      	; 0x95e <I2C_0_isr+0xc>
		I2C_0_collision_callback();
 95a:	e6 df       	rcall	.-52     	; 0x928 <I2C_0_collision_callback>
		return;
 95c:	08 95       	ret
	}

	if (TWI0.SSTATUS & TWI_BUSERR_bm) {
 95e:	80 91 1b 08 	lds	r24, 0x081B	; 0x80081b <__RODATA_PM_OFFSET__+0x7f881b>
 962:	82 ff       	sbrs	r24, 2
 964:	02 c0       	rjmp	.+4      	; 0x96a <I2C_0_isr+0x18>
		I2C_0_bus_error_callback();
 966:	ed df       	rcall	.-38     	; 0x942 <I2C_0_bus_error_callback>
		return;
 968:	08 95       	ret
	}

	if ((TWI0.SSTATUS & TWI_APIF_bm) && (TWI0.SSTATUS & TWI_AP_bm)) {
 96a:	80 91 1b 08 	lds	r24, 0x081B	; 0x80081b <__RODATA_PM_OFFSET__+0x7f881b>
 96e:	86 ff       	sbrs	r24, 6
 970:	09 c0       	rjmp	.+18     	; 0x984 <I2C_0_isr+0x32>
 972:	80 91 1b 08 	lds	r24, 0x081B	; 0x80081b <__RODATA_PM_OFFSET__+0x7f881b>
 976:	80 ff       	sbrs	r24, 0
 978:	05 c0       	rjmp	.+10     	; 0x984 <I2C_0_isr+0x32>
		I2C_0_address_callback();
 97a:	bc df       	rcall	.-136    	; 0x8f4 <I2C_0_address_callback>
		isFirstByte = true;
 97c:	81 e0       	ldi	r24, 0x01	; 1
 97e:	80 93 14 3e 	sts	0x3E14, r24	; 0x803e14 <isFirstByte.3669>
		return;
 982:	08 95       	ret
	}

	if (TWI0.SSTATUS & TWI_DIF_bm) {
 984:	80 91 1b 08 	lds	r24, 0x081B	; 0x80081b <__RODATA_PM_OFFSET__+0x7f881b>
 988:	88 23       	and	r24, r24
 98a:	bc f4       	brge	.+46     	; 0x9ba <I2C_0_isr+0x68>
		if (TWI0.SSTATUS & TWI_DIR_bm) {
 98c:	80 91 1b 08 	lds	r24, 0x081B	; 0x80081b <__RODATA_PM_OFFSET__+0x7f881b>
 990:	81 ff       	sbrs	r24, 1
 992:	11 c0       	rjmp	.+34     	; 0x9b6 <I2C_0_isr+0x64>
			// Master wishes to read from slave
			if (!(TWI0.SSTATUS & TWI_RXACK_bm) || isFirstByte) {
 994:	80 91 1b 08 	lds	r24, 0x081B	; 0x80081b <__RODATA_PM_OFFSET__+0x7f881b>
 998:	84 ff       	sbrs	r24, 4
 99a:	04 c0       	rjmp	.+8      	; 0x9a4 <I2C_0_isr+0x52>
 99c:	80 91 14 3e 	lds	r24, 0x3E14	; 0x803e14 <isFirstByte.3669>
 9a0:	88 23       	and	r24, r24
 9a2:	39 f0       	breq	.+14     	; 0x9b2 <I2C_0_isr+0x60>
				// Received ACK from master or First byte of transaction
				isFirstByte = false;
 9a4:	10 92 14 3e 	sts	0x3E14, r1	; 0x803e14 <isFirstByte.3669>
				I2C_0_read_callback();
 9a8:	8b df       	rcall	.-234    	; 0x8c0 <I2C_0_read_callback>
				TWI0.SCTRLB = TWI_ACKACT_ACK_gc | TWI_SCMD_RESPONSE_gc;
 9aa:	83 e0       	ldi	r24, 0x03	; 3
 9ac:	80 93 1a 08 	sts	0x081A, r24	; 0x80081a <__RODATA_PM_OFFSET__+0x7f881a>
 9b0:	08 95       	ret
			} else {
				// Received NACK from master
				I2C_0_goto_unaddressed();
 9b2:	7e df       	rcall	.-260    	; 0x8b0 <I2C_0_goto_unaddressed>
 9b4:	08 95       	ret
			}
		} else // Master wishes to write to slave
		{
			I2C_0_write_callback();
 9b6:	91 df       	rcall	.-222    	; 0x8da <I2C_0_write_callback>
 9b8:	08 95       	ret
		}
		return;
	}

	// Check if STOP was received
	if ((TWI0.SSTATUS & TWI_APIF_bm) && (!(TWI0.SSTATUS & TWI_AP_bm))) {
 9ba:	80 91 1b 08 	lds	r24, 0x081B	; 0x80081b <__RODATA_PM_OFFSET__+0x7f881b>
 9be:	86 ff       	sbrs	r24, 6
 9c0:	08 c0       	rjmp	.+16     	; 0x9d2 <I2C_0_isr+0x80>
 9c2:	80 91 1b 08 	lds	r24, 0x081B	; 0x80081b <__RODATA_PM_OFFSET__+0x7f881b>
 9c6:	80 fd       	sbrc	r24, 0
 9c8:	04 c0       	rjmp	.+8      	; 0x9d2 <I2C_0_isr+0x80>
		I2C_0_stop_callback();
 9ca:	a1 df       	rcall	.-190    	; 0x90e <I2C_0_stop_callback>
		TWI0.SCTRLB = TWI_SCMD_COMPTRANS_gc;
 9cc:	82 e0       	ldi	r24, 0x02	; 2
 9ce:	80 93 1a 08 	sts	0x081A, r24	; 0x80081a <__RODATA_PM_OFFSET__+0x7f881a>
 9d2:	08 95       	ret

000009d4 <__vector_19>:
		return;
	}
}

ISR(TWI0_TWIS_vect)
{
 9d4:	1f 92       	push	r1
 9d6:	0f 92       	push	r0
 9d8:	0f b6       	in	r0, 0x3f	; 63
 9da:	0f 92       	push	r0
 9dc:	11 24       	eor	r1, r1
 9de:	2f 93       	push	r18
 9e0:	3f 93       	push	r19
 9e2:	4f 93       	push	r20
 9e4:	5f 93       	push	r21
 9e6:	6f 93       	push	r22
 9e8:	7f 93       	push	r23
 9ea:	8f 93       	push	r24
 9ec:	9f 93       	push	r25
 9ee:	af 93       	push	r26
 9f0:	bf 93       	push	r27
 9f2:	ef 93       	push	r30
 9f4:	ff 93       	push	r31
	I2C_0_isr();
 9f6:	ad df       	rcall	.-166    	; 0x952 <I2C_0_isr>
}
 9f8:	ff 91       	pop	r31
 9fa:	ef 91       	pop	r30
 9fc:	bf 91       	pop	r27
 9fe:	af 91       	pop	r26
 a00:	9f 91       	pop	r25
 a02:	8f 91       	pop	r24
 a04:	7f 91       	pop	r23
 a06:	6f 91       	pop	r22
 a08:	5f 91       	pop	r21
 a0a:	4f 91       	pop	r20
 a0c:	3f 91       	pop	r19
 a0e:	2f 91       	pop	r18
 a10:	0f 90       	pop	r0
 a12:	0f be       	out	0x3f, r0	; 63
 a14:	0f 90       	pop	r0
 a16:	1f 90       	pop	r1
 a18:	18 95       	reti

00000a1a <I2C_0_set_bus_error_callback>:
 *
 * \return Nothing
 */
void I2C_0_set_bus_error_callback(I2C_0_callback handler)
{
	I2C_0_bus_error_interrupt_handler = handler;
 a1a:	80 93 a3 3f 	sts	0x3FA3, r24	; 0x803fa3 <I2C_0_bus_error_interrupt_handler>
 a1e:	90 93 a4 3f 	sts	0x3FA4, r25	; 0x803fa4 <I2C_0_bus_error_interrupt_handler+0x1>
 a22:	08 95       	ret

00000a24 <I2C_0_init>:
	//		 | TWI_SDAHOLD_OFF_gc /* SDA hold time off */
	//		 | TWI_SDASETUP_4CYC_gc; /* SDA setup time is 4 clock cycles */

	// TWI0.DBGCTRL = 0 << TWI_DBGRUN_bp; /* Debug Run: disabled */

	TWI0.SADDR = saddr << TWI_ADDRMASK_gp /* Slave Address: 0x20 */
 a24:	88 0f       	add	r24, r24
 a26:	e0 e1       	ldi	r30, 0x10	; 16
 a28:	f8 e0       	ldi	r31, 0x08	; 8
 a2a:	84 87       	std	Z+12, r24	; 0x0c
	             | 0 << TWI_ADDREN_bp;   /* General Call Recognition Enable: disabled */

	TWI0.SADDRMASK = 0 << TWI_ADDREN_bp         /* Address Mask Enable: disabled */
 a2c:	80 e2       	ldi	r24, 0x20	; 32
 a2e:	86 87       	std	Z+14, r24	; 0x0e
	                 | 0x10 << TWI_ADDRMASK_gp; /* Address Mask: 0x10 */

	TWI0.SCTRLA = 1 << TWI_APIEN_bp    /* Address/Stop Interrupt Enable: enabled */
 a30:	81 ee       	ldi	r24, 0xE1	; 225
 a32:	81 87       	std	Z+9, r24	; 0x09
	              | 1 << TWI_ENABLE_bp /* Enable TWI Slave: enabled */
	              | 1 << TWI_PIEN_bp   /* Stop Interrupt Enable: enabled */
	              | 0 << TWI_PMEN_bp   /* Promiscuous Mode Enable: disabled */
	              | 0 << TWI_SMEN_bp;  /* Smart Mode Enable: disabled */

	I2C_0_set_write_callback(NULL);
 a34:	80 e0       	ldi	r24, 0x00	; 0
 a36:	90 e0       	ldi	r25, 0x00	; 0
 a38:	58 df       	rcall	.-336    	; 0x8ea <I2C_0_set_write_callback>
	I2C_0_set_read_callback(NULL);
 a3a:	80 e0       	ldi	r24, 0x00	; 0
 a3c:	90 e0       	ldi	r25, 0x00	; 0
 a3e:	48 df       	rcall	.-368    	; 0x8d0 <I2C_0_set_read_callback>
	I2C_0_set_address_callback(NULL);
 a40:	80 e0       	ldi	r24, 0x00	; 0
 a42:	90 e0       	ldi	r25, 0x00	; 0
 a44:	5f df       	rcall	.-322    	; 0x904 <I2C_0_set_address_callback>
	I2C_0_set_stop_callback(NULL);
 a46:	80 e0       	ldi	r24, 0x00	; 0
 a48:	90 e0       	ldi	r25, 0x00	; 0
 a4a:	69 df       	rcall	.-302    	; 0x91e <I2C_0_set_stop_callback>
	I2C_0_set_collision_callback(NULL);
 a4c:	80 e0       	ldi	r24, 0x00	; 0
 a4e:	90 e0       	ldi	r25, 0x00	; 0
 a50:	73 df       	rcall	.-282    	; 0x938 <I2C_0_set_collision_callback>
	I2C_0_set_bus_error_callback(NULL);
 a52:	80 e0       	ldi	r24, 0x00	; 0
 a54:	90 e0       	ldi	r25, 0x00	; 0
 a56:	e1 df       	rcall	.-62     	; 0xa1a <I2C_0_set_bus_error_callback>
 a58:	08 95       	ret

00000a5a <protected_write_io>:
#if defined(__GNUC__)
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
#endif
	movw    r30, r24                // Load addr into Z
 a5a:	fc 01       	movw	r30, r24
	out     CCP, r22                // Start CCP handshake
 a5c:	64 bf       	out	0x34, r22	; 52
	st      Z, r20                  // Write value to I/O register
 a5e:	40 83       	st	Z, r20
	ret                             // Return to caller
 a60:	08 95       	ret

00000a62 <SLPCTRL_init>:

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
}
 a62:	80 e0       	ldi	r24, 0x00	; 0
 a64:	08 95       	ret

00000a66 <SPI_0_init>:
 * \return Initialization status
 */
int8_t SPI_0_init()
{

	SPI0.CTRLA = 0 << SPI_CLK2X_bp     /* Enable Double Speed: disabled */
 a66:	e0 e2       	ldi	r30, 0x20	; 32
 a68:	f8 e0       	ldi	r31, 0x08	; 8
 a6a:	83 e2       	ldi	r24, 0x23	; 35
 a6c:	80 83       	st	Z, r24
	             | 0 << SPI_DORD_bp    /* Data Order Setting: disabled */
	             | 1 << SPI_ENABLE_bp  /* Enable Module: enabled */
	             | 1 << SPI_MASTER_bp  /* SPI module in master mode */
	             | SPI_PRESC_DIV16_gc; /* System Clock / 16 */

	SPI0.CTRLB = 0 << SPI_BUFEN_bp   /* Buffer Mode Enable: disabled */
 a6e:	84 e0       	ldi	r24, 0x04	; 4
 a70:	81 83       	std	Z+1, r24	; 0x01
	//		 | 0 << SPI_RXCIE_bp /* Receive Complete Interrupt Enable: disabled */
	//		 | 0 << SPI_SSIE_bp /* Slave Select Trigger Interrupt Enable: disabled */
	//		 | 0 << SPI_TXCIE_bp; /* Transfer Complete Interrupt Enable: disabled */

	return 0;
}
 a72:	80 e0       	ldi	r24, 0x00	; 0
 a74:	08 95       	ret

00000a76 <TIMER_0_init>:

	// TCA0.SINGLE.CMP0 = 0x0; /* Compare Register 0: 0x0 */

	// TCA0.SINGLE.CMP1 = 0x0; /* Compare Register 1: 0x0 */

	TCA0.SINGLE.CMP2 = 0x4; /* Compare Register 2: 0x4 */
 a76:	e0 e0       	ldi	r30, 0x00	; 0
 a78:	fa e0       	ldi	r31, 0x0A	; 10
 a7a:	84 e0       	ldi	r24, 0x04	; 4
 a7c:	90 e0       	ldi	r25, 0x00	; 0
 a7e:	84 a7       	std	Z+44, r24	; 0x2c
 a80:	95 a7       	std	Z+45, r25	; 0x2d

	// TCA0.SINGLE.CNT = 0x0; /* Count: 0x0 */

	TCA0.SINGLE.CTRLB = 0 << TCA_SINGLE_ALUPD_bp            /* Auto Lock Update: disabled */
 a82:	83 e4       	ldi	r24, 0x43	; 67
 a84:	81 83       	std	Z+1, r24	; 0x01
	// TCA0.SINGLE.INTCTRL = 0 << TCA_SINGLE_CMP0_bp /* Compare 0 Interrupt: disabled */
	//		 | 0 << TCA_SINGLE_CMP1_bp /* Compare 1 Interrupt: disabled */
	//		 | 0 << TCA_SINGLE_CMP2_bp /* Compare 2 Interrupt: disabled */
	//		 | 0 << TCA_SINGLE_OVF_bp; /* Overflow Interrupt: disabled */

	TCA0.SINGLE.PER = 0x7; /* Period: 0x7 */
 a86:	87 e0       	ldi	r24, 0x07	; 7
 a88:	90 e0       	ldi	r25, 0x00	; 0
 a8a:	86 a3       	std	Z+38, r24	; 0x26
 a8c:	97 a3       	std	Z+39, r25	; 0x27

	// TCA0.SINGLE.CTRLA = TCA_SINGLE_CLKSEL_DIV1_gc /* System Clock */
	//		 | 0 << TCA_SINGLE_ENABLE_bp /* Module Enable: disabled */;

	return 0;
}
 a8e:	80 e0       	ldi	r24, 0x00	; 0
 a90:	08 95       	ret

00000a92 <_exit>:
 a92:	f8 94       	cli

00000a94 <__stop_program>:
 a94:	ff cf       	rjmp	.-2      	; 0xa94 <__stop_program>
